<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Station 1 with regular control box
//Configuration Data - Part 1
const int NCB = 5;
const int NSEG = 5;
const int NTRAIN = 2;
const int NPOINT = 2;
const int NROUTELENGTH = 4;

//TYPES
typedef int[0, NTRAIN-1] t_id;
typedef int[0, NCB-1]  cB_id;
typedef int[0, NPOINT-1] p_id;
typedef int[0, NSEG-1] seg_id;
typedef int[-1, NSEG-1] segV_id;
typedef int[-1, NPOINT-1] pV_id;
typedef int[-1, NCB-1] cBV_id;
typedef int[-1, NTRAIN-1] tV_id;
typedef struct {
    cB_id cb;
    seg_id seg;
} reservation;

//Configuration Data - Part 2
const int[0,NROUTELENGTH] resLimit = 2;
const int[0,NROUTELENGTH-1] lockLimit = 2;

const segV_id segRoutes[NTRAIN][NROUTELENGTH] = {{0,1,2,4}, {4,3,1,0}};
const cBV_id boxRoutes[NTRAIN][NROUTELENGTH+1] = {{0,1,2,3,4}, {4,3,2,1,0}};
const segV_id cBs[NCB][3]= {{0,-1,-1}, {0,1,-1}, {1,2,3}, {4,2,3}, {4,-1,-1}};
const pV_id points[NCB] = {-1, -1, 0, 1, -1};
const reservation initialRes[NTRAIN] = {{1, 0}, {3,4}};
bool pointInPlus[NPOINT] = {true, true};

//Channels
chan reqSeg[NCB][NTRAIN][NSEG];
chan reqLock[NCB][NTRAIN][NSEG][NSEG];
chan OK[NTRAIN];
chan notOK[NTRAIN];
chan pass[NCB];
chan passed[NCB];
chan switchPoint[NPOINT];
chan OKp[NPOINT];
urgent broadcast chan start;

int nextSegment(cB_id cb, seg_id s){
    int s1 = cBs[cb][0];
    int s2 = cBs[cb][1];
    if(points[cb] &gt; -1 &amp;&amp; !pointInPlus[points[cb]]){
        s2 = cBs[cb][2];
    }

    if(s == s1){
        return s2;
    } else {
        return s1;
    }    
}

////////////////////////////////////
//Well-formedness Functions
bool initialResIsConsistent(t_id id){
    return initialRes[id].cb == boxRoutes[id][1] &amp;&amp; initialRes[id].seg == segRoutes[id][0];
}

bool reservationIsWellFormed(reservation res){
    return cBs[res.cb][0] == res.seg || cBs[res.cb][1] == res.seg || cBs[res.cb][2] == res.seg;
}


bool sharesSegmentS(cB_id i, cB_id j, seg_id s){
    return  (i != j) &amp;&amp;
            (cBs[i][0] == s || cBs[i][1] == s || cBs[i][2] == s) &amp;&amp; 
            (cBs[j][0] == s || cBs[j][1] == s || cBs[j][2] == s);
}

bool routesAreConsistent(t_id id){
    cBV_id bRoute[NROUTELENGTH+1] = boxRoutes[id];
    segV_id sRoute[NROUTELENGTH] = segRoutes[id];

    for(i:int[0,NROUTELENGTH-1]){
        if((bRoute[i+1] != -1) == (sRoute[i] == -1)){
            return false;
        }
        if(bRoute[i+1] != -1 &amp;&amp; !sharesSegmentS(bRoute[i], bRoute[i+1], sRoute[i])){
            return false;
        }
    }
    return true; 
}

bool sharesSegment(cB_id i, cB_id j){
    return (i != j) &amp;&amp;
            ((cBs[i][0] != -1 &amp;&amp; (cBs[i][0] == cBs[j][0] || cBs[i][0] == cBs[j][1] || cBs[i][0] == cBs[j][2])) ||
            (cBs[i][1] != -1 &amp;&amp; (cBs[i][1] == cBs[j][0] || cBs[i][1] == cBs[j][1] || cBs[i][1] == cBs[j][2])) ||
            (cBs[i][2] != -1 &amp;&amp; (cBs[i][2] == cBs[j][0] || cBs[i][2] == cBs[j][1] || cBs[i][2] == cBs[j][2])));
}

bool boxRouteIsWellFormed(cBV_id route[NROUTELENGTH+1]){
    for(i:int[0,NROUTELENGTH-1]){
        if(route[i] == -1 &amp;&amp; route[i+1] != -1){
            return false;
        }
        if(route[i+1] != -1 &amp;&amp; !sharesSegment(route[i], route[i+1])){
            return false;
        }

    }
    return true; 
}
bool canConnect(seg_id s1, seg_id s2){
    for(i:cB_id){
        if(cBs[i][0] == s1 &amp;&amp; (cBs[i][1] == s2 || cBs[i][2] == s2)){
            return true;
        }
        if (cBs[i][0] == s2 &amp;&amp; (cBs[i][1] == s1 || cBs[i][2] == s1)){
            return true;
        }
    }
    return false;   
}

bool segRouteIsWellFormed(segV_id route[NROUTELENGTH]){
    int i = 0;
    if(route[0] == -1){
        return false;
    }
    while(i &lt;= NROUTELENGTH - 2){
        if(route[i] == -1 &amp;&amp; route[i+1] != -1){
            return false;
        }
        if(route[i+1] != -1 &amp;&amp; !canConnect(route[i], route[i+1])){
            return false;
        }
        i++;
    }
    return true; 
}

int pointIsWellFormed(cBV_id id){
    if(points[id] != -1){
        for(i : cB_id){
            if(i != id &amp;&amp; points[i] == points[id]){
                return false;
            }
        }
    }
    return (points[id] == -1) == (cBs[id][2] == -1);
}

int otherBoxes(cB_id id, segV_id s){
    segV_id cB[3] = cBs[id];
    int found = 0;
    for(i:cB_id){
        if(id != i &amp;&amp; (cBs[i][0] == s || cBs[i][1] == s || cBs[i][2] == s)){
            found++;
        }
    }
    return found;
}

bool cBIsWellFormed(cB_id id){
    segV_id cB[3] = cBs[id];

    //Invalid definitions
    if(cB[0] == -1 || (cB[1] == -1 &amp;&amp; cB[2] != -1) || (cB[0] == -1 &amp;&amp; cB[1] == -1)){
        return false;
    }
    if((cB[0] != -1 &amp;&amp; (cB[0] == cB[1] || cB[0] == cB[2])) ||
        (cB[1] != -1 &amp;&amp; (cB[1] == cB[0] || cB[1] == cB[2])) ||
        (cB[2] != -1 &amp;&amp; (cB[2] == cB[0] || cB[2] == cB[1]))){
        return false;
    }

    //Case: []--x--
    if(cB[1] == -1){
        return otherBoxes(id, cB[0]) == 1;
    }

    //Case: --x--[]--y--
    if(cB[2] == -1){
        return otherBoxes(id, cB[0]) == 1 &amp;&amp; otherBoxes(id, cB[1]) == 1;
    }

    //Case: Switch box
    for(i:cB_id){
        if(i != id &amp;&amp; 
            (cBs[i][0] == cB[0] &amp;&amp; (cBs[i][1] == cB[1] || cBs[i][2] == cB[2])) ||
            (cBs[i][1] == cB[1] &amp;&amp; cBs[i][2] != cB[2]) ||
            (cBs[i][2] == cB[2] &amp;&amp; cBs[i][1] != cB[1])){
                return false;
        }
    }
    return otherBoxes(id, cB[0]) == 1 &amp;&amp; otherBoxes(id, cB[1]) == 1 &amp;&amp; otherBoxes(id, cB[2]) == 1;
}
</declaration>
	<template>
		<name x="5" y="5">Train</name>
		<parameter>t_id id</parameter>
		<declaration>//segV_id segments[NROUTELENGTH];
//cBV_id boxes[NROUTELENGTH+1];

int[0,NROUTELENGTH] routeLength;
segV_id curSeg;

bool requiresLock[NCB];

cB_id lockIndex = 1;
seg_id index = 0;

int[0,1] resBit = 0;
cB_id resCBIndex = 1;
int[0,NSEG] resSegIndex = 0;

segV_id headSeg = -1;
cB_id locks = 0;

void updateLockIndex(){
    while(lockIndex &lt; NCB-1 &amp;&amp; !requiresLock[lockIndex]){
        lockIndex++;
    }
}

void initialize() {
    //Segments
    for(i : int[0,NROUTELENGTH-1]) {
        if(segRoutes[id][i]&gt;-1) {
            routeLength++;
        }
    }
    curSeg = segRoutes[id][0];

    //Control boxes
    for(i : int[0,NROUTELENGTH]) {
        if(boxRoutes[id][i] &gt; -1){
            requiresLock[i] = points[boxRoutes[id][i]] &gt; -1;
        }
    }

    //Locks and reservations
    resSegIndex = 1;
    updateLockIndex();
}

bool possibleToLock() {
    return lockIndex &lt; routeLength &amp;&amp; locks &lt; lockLimit &amp;&amp; ((resBit == 0 &amp;&amp; resSegIndex &gt; lockIndex) || (resBit == 1 &amp;&amp; resSegIndex &gt;= lockIndex));
}

bool hasArrived() {
    return curSeg == segRoutes[id][routeLength-1];
}

bool possibleToReserve() {
    return resSegIndex &lt; routeLength &amp;&amp; resSegIndex - 1 - index &lt; resLimit;
}

bool possibleToPass() {
    return resSegIndex &gt; index + 1 &amp;&amp; lockIndex &gt; index + 1 &amp;&amp; index + 1 &lt; routeLength;
}

void updateResInfo(){
    resBit = resBit^1;
    resSegIndex = (resBit==0) ? resSegIndex + 1 : resSegIndex;
    resCBIndex = (resBit==1) ? resCBIndex + 1 : resCBIndex;
}

void updateLocationInfo(){
    curSeg = headSeg;
    headSeg = -1;
    if(requiresLock[index + 1]){
        locks--;
    }
    index++;
}

void updateHeadInfo(){
    headSeg = nextSegment(boxRoutes[id][index+1], curSeg);
}

void updateLockInfo(){
    locks++;
    lockIndex++;
    updateLockIndex();
}

bool isWellFormed(){
	return segRouteIsWellFormed(segRoutes[id]) &amp;&amp;
           boxRouteIsWellFormed(boxRoutes[id]) &amp;&amp; 
           routesAreConsistent(id) &amp;&amp; 
           reservationIsWellFormed(initialRes[id]) &amp;&amp; 
           initialResIsConsistent(id);
}</declaration>
		<location id="id0" x="-340" y="-1156">
			<name x="-323" y="-1173">DoubleSegment</name>
		</location>
		<location id="id1" x="-1020" y="-1156">
			<name x="-1030" y="-1190">Initial</name>
		</location>
		<location id="id2" x="-680" y="-1156">
			<name x="-748" y="-1181">Arrived</name>
		</location>
		<location id="id3" x="-340" y="-748">
			<name x="-323" y="-765">Reserving</name>
		</location>
		<location id="id4" x="-680" y="-952">
			<name x="-807" y="-969">SingleSegment</name>
		</location>
		<location id="id5" x="-1020" y="-748">
			<name x="-1044" y="-732">Locking</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-1011" y="-1096">isWellFormed()</label>
			<label kind="synchronisation" x="-1011" y="-1079">start?</label>
			<label kind="assignment" x="-1011" y="-1062">initialize()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-833" y="-739">notOK[id]?</label>
			<nail x="-748" y="-748"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-841" y="-858">OK[id]?</label>
			<label kind="assignment" x="-841" y="-841">updateLockInfo()</label>
			<nail x="-850" y="-850"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-323" y="-875">OK[id]?</label>
			<label kind="assignment" x="-323" y="-858">updateResInfo()</label>
			<nail x="-340" y="-884"/>
			<nail x="-510" y="-918"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<nail x="-714" y="-1224"/>
			<nail x="-646" y="-1224"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-544" y="-1207">possibleToPass()</label>
			<label kind="synchronisation" x="-544" y="-1190">pass[boxRoutes[id][index+1]]!</label>
			<label kind="assignment" x="-544" y="-1173">updateHeadInfo()</label>
			<nail x="-578" y="-1156"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-765" y="-1113">hasArrived()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-501" y="-867">notOK[id]?</label>
			<nail x="-552" y="-875"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-450" y="-994">passed[boxRoutes[id][index+1]]!</label>
			<label kind="assignment" x="-450" y="-977">updateLocationInfo()</label>
			<nail x="-340" y="-1020"/>
			<nail x="-595" y="-969"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-1317" y="-833">possibleToLock()</label>
			<label kind="synchronisation" x="-1317" y="-816">reqLock[boxRoutes[id][lockIndex]][id]
[segRoutes[id][lockIndex-1]][segRoutes[id][lockIndex]]!</label>
			<nail x="-1020" y="-884"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-612" y="-740">possibleToReserve()</label>
			<label kind="synchronisation" x="-612" y="-722">reqSeg[boxRoutes[id][resCBIndex]][id][segRoutes[id][resSegIndex]]!</label>
			<nail x="-612" y="-748"/>
			<nail x="-527" y="-748"/>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<location id="id6" x="0" y="136">
			<name x="8" y="110">Initialized</name>
		</location>
		<location id="id7" x="0" y="0">
			<name x="-10" y="-34">Uninitialized</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="8" y="51">start!</label>
		</transition>
	</template>
	<template>
		<name>CB</name>
		<parameter>cB_id id</parameter>
		<declaration>//segV_id segments[3];
segV_id connected =-1;
pV_id point = -1;

tV_id res[3] = {-1, -1, -1};
int[-1,2] result = -1;
tV_id tid = -1;
tV_id lockedBy = -1;

const int ERROR = 0;
const int NOSWITCH = 1;
const int DOSWITCH = 2;

void initialize() {
    point = points[id];
    connected = cBs[id][1];

    if(point != -1 &amp;&amp; !pointInPlus[point]){
        connected = cBs[id][2];
    }

    for(i : t_id) {
        if (initialRes[i].cb == id) {
            seg_id s = initialRes[i].seg;
            if(s == cBs[id][0]){
                res[0] = i;
            } else if (s == cBs[id][1]){
                res[1] = i;
            } else {
                res[2] = i;
            }
        }
    }
}

int[-1,2] checkSegment(t_id tid, seg_id sid) {
    for(i:int[0,2]) {
        if(cBs[id][i] == sid &amp;&amp; res[i] == -1) {
            return i;
        }
    }
    return -1;
}

int[0,2] checkLock(t_id tid, seg_id s1, seg_id s2){
  if(lockedBy == -1 &amp;&amp; (cBs[id][0] == s1 &amp;&amp; exists(i:int[1,2]) cBs[id][i] == s2) || (cBs[id][0] == s2 &amp;&amp; exists(i:int[1,2]) cBs[id][i] == s1)){
    if ((s1 == cBs[id][0] &amp;&amp; s2 == connected) || (s2 == cBs[id][0] &amp;&amp; s1 == connected)){
        return NOSWITCH;
    } else
        return DOSWITCH;
    }
    return ERROR;
}


void clear(){
     lockedBy = -1;

     res[0] = -1;
     if(connected == cBs[id][1]) {
        res[1] = -1;
     } else {
        res[2] = -1;
     }
}

void updateConnected(){
    if(connected == cBs[id][1]){
        connected = cBs[id][2];
    } else {
        connected = cBs[id][1];
    }
}

void resetVariables(){
    tid = -1;
    result = -1;
}

void updateLockInfo(){
    lockedBy = tid;
    resetVariables();
}

void updateResInfo(){
    res[result]=tid;
    resetVariables();
}

bool isWellFormed(){
    return cBIsWellFormed(id) &amp;&amp; pointIsWellFormed(id);
}</declaration>
		<location id="id8" x="-1045" y="51">
			<name x="-1096" y="42">Initial</name>
		</location>
		<location id="id9" x="-1139" y="-68">
			<name x="-1164" y="-102">Passing</name>
		</location>
		<location id="id10" x="-356" y="-34">
			<name x="-366" y="-68">Switching</name>
		</location>
		<location id="id11" x="-884" y="-306">
			<name x="-940" y="-338">SegmentChecked</name>
		</location>
		<location id="id12" x="-170" y="-34">
			<name x="-154" y="-42">Switched</name>
		</location>
		<location id="id13" x="-646" y="-34">
			<name x="-680" y="-17">LockChecked</name>
		</location>
		<location id="id14" x="-884" y="-68">
			<name x="-858" y="-93">Idle</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id8"/>
			<target ref="id14"/>
			<label kind="guard" x="-1011" y="25">isWellFormed()</label>
			<label kind="synchronisation" x="-1011" y="42">start?</label>
			<label kind="assignment" x="-1011" y="59">initialize()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-1079" y="-136">passed[id]?</label>
			<label kind="assignment" x="-1079" y="-119">clear()</label>
			<nail x="-1020" y="-102"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-331" y="-34">OKp[point]?</label>
			<label kind="assignment" x="-331" y="-17">updateConnected()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-458" y="-153">result == NOSWITCH</label>
			<nail x="-646" y="-136"/>
			<nail x="-322" y="-136"/>
			<nail x="-170" y="-136"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-1105" y="-34">pass[id]?</label>
			<nail x="-952" y="-51"/>
			<nail x="-1020" y="-34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="guard" x="-569" y="-68">result == DOSWITCH</label>
			<label kind="synchronisation" x="-569" y="-51">switchPoint[point]!</label>
			<nail x="-373" y="-34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-782" y="-34">result == ERROR</label>
			<label kind="synchronisation" x="-782" y="-17">notOK[tid]!</label>
			<label kind="assignment" x="-782" y="0">resetVariables()</label>
			<nail x="-816" y="-34"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-807" y="-289">result == -1</label>
			<label kind="synchronisation" x="-807" y="-272">notOK[tid]!</label>
			<label kind="assignment" x="-807" y="-255">resetVariables()</label>
			<nail x="-816" y="-272"/>
			<nail x="-816" y="-136"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-943" y="-238">result &gt; -1</label>
			<label kind="synchronisation" x="-943" y="-221">OK[tid]!</label>
			<label kind="assignment" x="-943" y="-204">updateResInfo()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="select" x="-790" y="-187">i : t_id,
j : seg_id,
k : seg_id</label>
			<label kind="synchronisation" x="-790" y="-136">reqLock[id][i][j][k]?</label>
			<label kind="assignment" x="-790" y="-119">result = checkLock(i,j,k),
tid = i</label>
			<nail x="-714" y="-68"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="select" x="-1173" y="-263">i : t_id,
j : seg_id</label>
			<label kind="synchronisation" x="-1173" y="-229">reqSeg[id][i][j]?</label>
			<label kind="assignment" x="-1173" y="-212">result = checkSegment(i,j),
tid = i</label>
			<nail x="-952" y="-136"/>
			<nail x="-952" y="-272"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-722" y="34">OK[tid]!</label>
			<label kind="assignment" x="-722" y="51">updateLockInfo()</label>
			<nail x="-170" y="34"/>
			<nail x="-884" y="34"/>
		</transition>
	</template>
	<template>
		<name>Point</name>
		<parameter>p_id id</parameter>
		<location id="id15" x="136" y="-85">
			<name x="102" y="-119">SwitchingPM</name>
		</location>
		<location id="id16" x="136" y="153">
			<name x="127" y="170">Initial</name>
		</location>
		<location id="id17" x="136" y="68">
			<name x="102" y="34">SwitchingMP</name>
		</location>
		<location id="id18" x="340" y="0">
			<name x="330" y="-30">Minus</name>
		</location>
		<location id="id19" x="-68" y="0">
			<name x="-78" y="-30">Plus</name>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="guard" x="238" y="119">!pointInPlus[id]</label>
			<label kind="synchronisation" x="289" y="136">start?</label>
			<nail x="340" y="153"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="guard" x="-51" y="119">pointInPlus[id]</label>
			<label kind="synchronisation" x="-50" y="136">start?</label>
			<nail x="-68" y="153"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-42" y="-68">switchPoint[id]?</label>
			<nail x="34" y="-42"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="212" y="42">switchPoint[id]?</label>
			<nail x="238" y="34"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="246" y="-76">OKp[id]!</label>
			<label kind="assignment" x="246" y="-59">pointInPlus[id] = false</label>
			<nail x="238" y="-42"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-25" y="42">OKp[id]!</label>
			<label kind="assignment" x="-25" y="59">pointInPlus[id] = true</label>
			<nail x="34" y="34"/>
		</transition>
	</template>
	<system>system Initializer, Train, CB, Point;</system>
	<queries>
		<query>
			<formula>
			</formula>
			<comment>MISCELLANEOUS
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) not(Train(i).Initial)
			</formula>
			<comment>Well-formedness of Train
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:cB_id) not(CB(i).Initial)
			</formula>
			<comment>Well-formedness of CB
			</comment>
		</query>
		<query>
			<formula>A[] !deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>LIVENESS AND SAFETY
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) Train(i).Arrived
			</formula>
			<comment>Liveness
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:t_id) Initializer.Initialized &amp;&amp; i != j imply
	(Train(i).curSeg != Train(j).curSeg) &amp;&amp;
	(Train(i).DoubleSegment imply Train(i).headSeg != Train(j).curSeg) &amp;&amp;
	(Train(i).DoubleSegment &amp;&amp; Train(j).DoubleSegment imply Train(i).headSeg!= Train(j).headSeg)
			</formula>
			<comment>No collision
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:int[0,1]) Train(i).DoubleSegment imply
	(Train(i).headSeg == cBs[boxRoutes[i][Train(i).index+1]][0] &amp;&amp; Train(i).headSeg == CB(boxRoutes[i][Train(i).index+1]).connected) ||
	(Train(i).curSeg == cBs[boxRoutes[i][Train(i).index+1]][0] ||  Train(i).curSeg == CB(boxRoutes[i][Train(i).index+1]).connected)
			</formula>
			<comment>No derailment:
A train passing a point always moves between the connected segments
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Train(i).DoubleSegment &amp;&amp; points[boxRoutes[i][Train(i).index+1]] != -1 imply
	!Point(points[boxRoutes[i][Train(i).index+1]]).SwitchingPM &amp;&amp; !Point(points[boxRoutes[i][Train(i).index+1]]).SwitchingMP
			</formula>
			<comment>No derailment:
A train is never in a critical section while the point there is switching
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>CONCISTENCY
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Train(i).locks == (sum(j:cB_id) (j &gt; Train(i).index &amp;&amp; j &lt; Train(i).lockIndex &amp;&amp; points[boxRoutes[i][j]] &gt; -1))
			</formula>
			<comment>A TCC's locks variable is always the true number of locks
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:p_id) (Point(i).Plus imply pointInPlus[i]) &amp;&amp; (Point(i).Minus imply !pointInPlus[i])
			</formula>
			<comment>Network array consistency:
The pointInPlus array reflects the true state of all Points
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) points[i] &gt; -1 imply
	(Point(points[i]).Plus imply CB(i).connected == cBs[i][1]) &amp;&amp; (Point(points[i]).Minus imply CB(i).connected == cBs[i][2])
			</formula>
			<comment>Point consistency:
A CB's connected information is consistent with its Point's position
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) CB(i).lockedBy &gt; -1 imply
	(exists(k:cB_id) boxRoutes[CB(i).lockedBy][k] == i &amp;&amp; k &gt; Train(CB(i).lockedBy).index &amp;&amp; k &lt; Train(CB(i).lockedBy).lockIndex)
			</formula>
			<comment>Lock consistency:
A CB's lock information is also reflected in the state space of the relevant TCC
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id) (j &gt; Train(i).index &amp;&amp; j &lt; Train(i).lockIndex &amp;&amp; Train(i).requiresLock[j] imply 
	CB(boxRoutes[i][j]).lockedBy == i)
			</formula>
			<comment>Lock consistency:
A TCC's obtained locks are reflected in the relevant CBs
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:seg_id) (j &gt;= Train(i).index &amp;&amp; j &lt; Train(i).resSegIndex imply exists(l:int[0,2]) cBs[boxRoutes[i][j+1]][l] == segRoutes[i][j] &amp;&amp; CB(boxRoutes[i][j+1]).res[l] == i) &amp;&amp;
		(j &gt; Train(i).index &amp;&amp; j &lt; Train(i).resCBIndex imply exists(l:int[0,2]) cBs[boxRoutes[i][j]][l] == segRoutes[i][j] &amp;&amp; CB(boxRoutes[i][j]).res[l] == i)
			</formula>
			<comment>Reservation consistency:
All segment reservations obtained by a TCC are also saved in the state space of the relevant CBs
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) forall(j:int[0,2]) CB(i).res[j] &gt; -1 imply
	exists(k:seg_id) segRoutes[CB(i).res[j]][k] == cBs[i][j] &amp;&amp; k &gt;= Train(CB(i).res[j]).index &amp;&amp;
		(Train(CB(i).res[j]).resCBIndex == Train(CB(i).res[j]).resSegIndex imply (k &lt; Train(CB(i).res[j]).resSegIndex)) &amp;&amp;
		(Train(CB(i).res[j]).resCBIndex != Train(CB(i).res[j]).resSegIndex imply (k &lt; Train(CB(i).res[j]).resCBIndex))
			</formula>
			<comment>Reservation consistency: 
All reservations at a CB are also saved in the state space of the relevant TCCs
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>PASS
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Train(i).DoubleSegment imply 
	Train(i).index+1 &lt; Train(i).resSegIndex
			</formula>
			<comment>A train only enters a segment that is has the full reservation of
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Train(i).DoubleSegment imply boxRoutes[i][Train(i).index+1] != boxRoutes[i][Train(i).routeLength]
			</formula>
			<comment>A train never passes the last control box in its route
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Train(i).DoubleSegment &amp;&amp; points[boxRoutes[i][Train(i).index+1]] != -1 imply
	CB(boxRoutes[i][Train(i).index+1]).lockedBy == i
			</formula>
			<comment>A train only passes a switch box if it has been locked for the train
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>LOCKS
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) CB(i).Switched imply CB(i).lockedBy == -1
			</formula>
			<comment>A CB only returns acknowledgement for a lock request if its point was unlocked prior to the request
A TCC only requests locks for switch boxes that it has not already obtained the lock at

A lock is only ever given if it was available
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) (CB(i).Switched || CB(i).Switching) imply !(exists(j:t_id) (Train(j).DoubleSegment &amp;&amp; boxRoutes[j][Train(j).index+1] == i))
			</formula>
			<comment>A control box only switches if no train is in its critical section
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id) (Train(i).Locking &amp;&amp; CB(j).Switched &amp;&amp; CB(j).tid == i) imply 
	(exists(k:int[1,2]) 
	(cBs[j][0] == segRoutes[i][Train(i).lockIndex-1] &amp;&amp; cBs[j][k] == segRoutes[i][Train(i).lockIndex]) ||
	(cBs[j][0] == segRoutes[i][Train(i).lockIndex] &amp;&amp; cBs[j][k] == segRoutes[i][Train(i).lockIndex-1]))
			</formula>
			<comment>A CB only returns acknowledgement for a switch/lock request if the requested segments are its stem and one of its other segments
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) CB(i).lockedBy != -1 imply 
	CB(i).res[0] == CB(i).lockedBy &amp;&amp; 
	exists(j:int[0,2]) cBs[i][j] == CB(i).connected &amp;&amp; CB(i).res[j] == CB(i).lockedBy
			</formula>
			<comment>A TCC only has locks for CB's that it has the stem reservation at and one other segment reservation
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) (CB(i).lockedBy != -1) imply (exists(j:cB_id) boxRoutes[CB(i).lockedBy][j] == i)
			</formula>
			<comment>A TCC only requests locks at switch boxes on its route
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Train(i).locks &lt;= lockLimit
			</formula>
			<comment>A TCC never has more locks than allowed
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>RESERVATIONS
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id) 
	(Train(i).Reserving &amp;&amp; CB(j).SegmentChecked &amp;&amp; CB(j).tid == i &amp;&amp; CB(j).result &gt; -1) imply 
	CB(j).res[CB(j).result] == -1
			</formula>
			<comment>A CB only returns acknowledgement for reservation requests of available segments
A TCC only reserves segments that it does not already have a reservation for

A reservation is only ever given if it was available
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id) 
	(Train(i).Reserving &amp;&amp; CB(j).SegmentChecked &amp;&amp; CB(j).tid == i &amp;&amp; CB(j).result &gt; -1) imply 
	(exists(k:int[0,2]) cBs[j][k] == segRoutes[i][Train(i).resSegIndex])
			</formula>
			<comment>A control box only returns acknowledgement for reservations involving segments that it is associated with
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) forall(j:int[0,2]) 
	CB(i).res[j] != -1 imply 
	exists(k:cB_id) boxRoutes[CB(i).res[j]][k] == i
			</formula>
			<comment>A TCC only reserves at control boxes on its route
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) forall(j:int[0,2])
	CB(i).res[j] != -1 imply 
	exists(k:seg_id) segRoutes[CB(i).res[j]][k] == cBs[i][j]
			</formula>
			<comment>A TCC only reserves segments on its route
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Train(i).resSegIndex - 1 - Train(i).index &lt;= resLimit
			</formula>
			<comment>A TCC never has more reservations than allowed
			</comment>
		</query>
	</queries>
</nta>
