<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//Configuration Data - Part 1
const int NTRAIN = 2;
const int NCB = 3;
const int NPOINT = 1;
const int NSEG = 2;

//TYPES
typedef int[0, NTRAIN-1] t_id; //Train IDs
typedef int[0, NCB-1]  cB_id; //Control box IDs
typedef int[0, NPOINT-1] p_id; //Switch IDs
typedef int[0, NSEG-1] seg_id; //Segment IDs
typedef int[-1, NSEG-1] segV_id; //Segment IDs with -1
typedef int[-1, NPOINT-1] pV_id; //Switch IDs with -1
typedef int[-1, NCB-1] cBV_id; //Control Box IDs with -1
typedef int[-1, NTRAIN-1] tV_id; //Train IDs with -1
typedef struct {
    cB_id cb;
    seg_id seg;
} reservation;

//Configuration Data - Part 2
const int[1,NCB] lockLimit = 1;
const int[1,NSEG] resLimit = 1;

const segV_id segRoutes[NTRAIN][NSEG]= {{0,1},{1,-1}};
const cBV_id boxRoutes[NTRAIN][NCB] = {{0,1,2},{1,2,-1}};
const segV_id cBs[NCB][3]= {{-1,0,-1}, {0,1,-1}, {1,-1,-1}};
const reservation initialRes[NTRAIN] = {{1, 0}, {2, 1}};
const pV_id points[NCB] = {-1,-1,-1};
const bool pointInPlus[NPOINT] = {false};

//Channels
chan reqSeg[NCB][NTRAIN][NSEG];
chan reqLock[NCB][NTRAIN][NSEG][NSEG];
chan OK[NTRAIN];
chan notOK[NTRAIN];
chan pass[NCB];
chan passed[NCB];
chan switchPoint[NPOINT];
chan OKp[NCB];
urgent broadcast chan start;

////////////////////////////////////
//Well-formedness Functions
bool initialResIsConsistent(t_id id){
    return initialRes[id].cb == boxRoutes[id][1] &amp;&amp; initialRes[id].seg == segRoutes[id][0];
}

bool reservationIsWellFormed(reservation res){
    return cBs[res.cb][0] == res.seg || cBs[res.cb][1] == res.seg || cBs[res.cb][2] == res.seg;
}

bool pointIsWellFormed(cBV_id id){
    if(points[id] != -1){
        return cBs[id][2] != -1;
    } else {
        return cBs[id][2] == -1;
    }
}
bool sharesSegment(cB_id i, cB_id j){
    return (i != j) &amp;&amp;
            ((cBs[i][0] != -1 &amp;&amp; (cBs[i][0] == cBs[j][0] || cBs[i][0] == cBs[j][1] || cBs[i][0] == cBs[j][2])) ||
            (cBs[i][1] != -1 &amp;&amp; (cBs[i][1] == cBs[j][0] || cBs[i][1] == cBs[j][1] || cBs[i][1] == cBs[j][2])) ||
            (cBs[i][2] != -1 &amp;&amp; (cBs[i][2] == cBs[j][0] || cBs[i][2] == cBs[j][1] || cBs[i][2] == cBs[j][2])));
}

bool sharesSegmentS(cB_id i, cB_id j, seg_id s){
    return (i != j) &amp;&amp;
            ((cBs[i][0] == s &amp;&amp; (s == cBs[j][0] || s == cBs[j][1] || s == cBs[j][2])) ||
            (cBs[i][1] == s &amp;&amp; (s == cBs[j][0] || s == cBs[j][1] || s == cBs[j][2])) ||
            (cBs[i][2] == s &amp;&amp; (s == cBs[j][0] || s == cBs[j][1] || s == cBs[j][2])));
}

bool routesAreConsistent(t_id id){
    cBV_id bRoute[NCB] = boxRoutes[id];
    segV_id sRoute[NSEG] = segRoutes[id];

    for(i:int[0,NCB-2]){
        if(bRoute[i+1] != -1 &amp;&amp; sRoute[i] == -1){
            return false;
        }
        if(bRoute[i+1] != -1 &amp;&amp; !sharesSegmentS(bRoute[i], bRoute[i+1], sRoute[i])){
            return false;
        }
        if(bRoute[i] == -1 &amp;&amp; sRoute[i] != -1){
            return false;
        }
    }
    return true; 
}

bool boxRouteIsWellFormed(cBV_id route[NCB]){
    for(i:int[0,NCB-2]){
        if(route[i] == -1 &amp;&amp; route[i+1] != -1){
            return false;
        }
        if(route[i+1] != -1 &amp;&amp; !sharesSegment(route[i], route[i+1])){
            return false;
        }

    }
    return true; 
}

bool canConnect(seg_id s1, seg_id s2){
    for(i:cB_id){
        if(cBs[i][0] == s1 &amp;&amp; (cBs[i][1] == s2 || cBs[i][2] == s2)){
            return true;
        } else if (cBs[i][1] == s1 &amp;&amp; (cBs[i][0] == s2 || cBs[i][2] == s2)){
            return true;
        } else if (cBs[i][2] == s1 &amp;&amp; (cBs[i][0] == s2 || cBs[i][1] == s2)){
            return true;
        }
    }
    return false;   
}

bool segRouteIsWellFormed(segV_id route[NSEG]){
    for(i:int[0,NSEG-2]){
        if(route[i] == -1 &amp;&amp; route[i+1] != -1){
            return false;
        }
        if(route[i+1] != -1 &amp;&amp; !canConnect(route[i], route[i+1])){
            return false;
        }

    }
    return true; 
}

int otherBox(segV_id cB[3], segV_id s){
    int found = 0;
    for(i:cB_id){
        if(cBs[i] != cB &amp;&amp; (cBs[i][0] == s || cBs[i][1] == s || cBs[i][2] == s)){
            found++;
        }
    }
    return found;
}

bool cBIsWellFormed(segV_id cB[3]){
    //Invalid forms
    if((cB[0] == -1 &amp;&amp; cB[1] == -1) || (cB[0] == -1 &amp;&amp; cB[2] != -1) || (cB[1] == -1 &amp;&amp; cB[2] != -1)){
        return false;
    }
    if((cB[0] != -1 &amp;&amp; (cB[0] == cB[1] || cB[0] == cB[2])) ||
        (cB[1] != -1 &amp;&amp; (cB[1] == cB[0] || cB[1] == cB[2])) ||
        (cB[2] != -1 &amp;&amp; (cB[2] == cB[0] || cB[2] == cB[1]))){
        return false;
    }

    //Case: [cb]--x--[i] 
    if(cB[0] == -1 &amp;&amp; cB[2] == -1){
        //Only one control box may be at the segment's down end
        for(i:cB_id){
            if(cBs[i] != cB &amp;&amp; cBs[i][1] == cB[1] &amp;&amp; (cBs[i][1] == -1 || cBs[i][2] == -1)){ 
                return false;
            }
        }
        return otherBox(cB, cB[1]) == 1;
    }

    //Case: [j]--y--[cb]
    if(cB[1] == -1 &amp;&amp; cB[2] == -1){
        //Only one control box may be at the segment's up end
        for(i:cB_id){
            if(cBs[i] != cB &amp;&amp; cBs[i][0] == cB[0] &amp;&amp; (cBs[i][1] == -1 || cBs[i][2] == -1)){ 
                return false;
            }
        }
        return otherBox(cB, cB[0]) == 1;
    }

    //Case: [j]--y--[cb]--x--[i]
    if(cB[2] == -1){
        for(i:cB_id){
            if(cBs[i] != cB &amp;&amp; cBs[i][1] == cB[1] &amp;&amp; (cBs[i][1] == -1 || cBs[i][2] == -1)){ 
                return false;
            }
            if(cBs[i] != cB &amp;&amp; cBs[i][0] == cB[1] &amp;&amp; (cBs[i][1] == -1 || cBs[i][2] == -1)){ 
                return false;
            }
        }
        return otherBox(cB, cB[0]) == 1 &amp;&amp; otherBox(cB, cB[1]) == 1;
    }


    //Case: Point
    for(i:cB_id){
        //No switch boxes can share stem segment with same plus or minus segment, no switch boxes can share minus segment without also sharing plus segment
        if(cBs[i] != cB &amp;&amp; (cBs[i][0] == cB[0] &amp;&amp; (cBs[i][1] == cB[1] || cBs[i][2] == cB[2])) &amp;&amp; (cBs[i][1] != -1 &amp;&amp; cBs[i][1] != cB[1])){ 
            return false;
        }
    }
    return otherBox(cB, cB[0]) == 1 &amp;&amp; otherBox(cB, cB[1]) == 1 &amp;&amp; otherBox(cB, cB[2]) == 1;
}
</declaration>
	<template>
		<name x="5" y="5">TCC</name>
		<parameter>t_id id</parameter>
		<declaration>segV_id segments[NSEG];
int[0,NSEG] routeLength;
segV_id curSeg;

cBV_id boxes[NCB];
bool requiresLock[NCB];
cBV_id nextCB;

int[0,1] resBit = 0;
cB_id resCBIndex = 1;
seg_id resSegIndex = 1;

cB_id lockIndex = 1;

seg_id nextSegIndex = 1;


void copySegments() {
    for(i : seg_id) {
        segments[i] = segRoutes[id][i];
        if(segments[i]&gt;-1) {
            routeLength++;
        }
    }
    curSeg = segments[0];
}

void copyControlBoxes() {
    for(i : cB_id) {
        boxes[i] = boxRoutes[id][i];
        if(boxes[i] &gt; -1){
            requiresLock[i] = points[boxes[i]] &gt; -1;
        }
    }
    nextCB = boxes[1];
}

void updateLockIndex(){
    while(lockIndex &lt; NCB-1 &amp;&amp; !requiresLock[lockIndex]){
        lockIndex++;
    }
}
bool possibleToLock() {
    return lockIndex &lt; routeLength &amp;&amp; lockIndex - nextSegIndex &lt; lockLimit &amp;&amp; resSegIndex &gt; lockIndex;
}

bool possibleToReserve() {
    return resSegIndex &lt; routeLength &amp;&amp; resCBIndex &lt;= routeLength &amp;&amp; resSegIndex - nextSegIndex &lt; resLimit;
}

bool possibleToPass() {
    return resSegIndex &gt; nextSegIndex &amp;&amp; lockIndex &gt; nextSegIndex &amp;&amp; nextCB != boxes[routeLength];
}

bool hasArrived() {
    return nextSegIndex == routeLength;
}

void updateResData(){
    resBit = resBit^1;
    resSegIndex = (resBit==0) ? resSegIndex + 1 : resSegIndex;
    resCBIndex = (resBit==1) ? resCBIndex + 1 : resCBIndex;
}

void updateLocationInfo(){
    curSeg = segments[nextSegIndex];
    nextSegIndex++;
    nextCB = boxes[nextSegIndex];
}

bool isWellFormed(){
	return boxRouteIsWellFormed(boxRoutes[id]) &amp;&amp; 
           segRouteIsWellFormed(segRoutes[id]) &amp;&amp; 
           routesAreConsistent(id) &amp;&amp; 
           reservationIsWellFormed(initialRes[id]) &amp;&amp; 
           initialResIsConsistent(id);
}</declaration>
		<location id="id0" x="-340" y="-1156">
			<name x="-323" y="-1173">DoubleSegment</name>
		</location>
		<location id="id1" x="-1020" y="-1156">
			<name x="-1030" y="-1190">Initial</name>
		</location>
		<location id="id2" x="-680" y="-1156">
			<name x="-748" y="-1181">Arrived</name>
		</location>
		<location id="id3" x="-340" y="-748">
			<name x="-323" y="-765">Reserving</name>
		</location>
		<location id="id4" x="-680" y="-952">
			<name x="-807" y="-969">SingleSegment</name>
		</location>
		<location id="id5" x="-1020" y="-748">
			<name x="-1044" y="-732">Locking</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-1011" y="-1096">isWellFormed()</label>
			<label kind="synchronisation" x="-1011" y="-1079">start?</label>
			<label kind="assignment" x="-1011" y="-1062">copySegments(),
copyControlBoxes(),
updateLockIndex()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-833" y="-739">notOK[id]?</label>
			<nail x="-748" y="-748"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-841" y="-858">OK[id]?</label>
			<label kind="assignment" x="-850" y="-841">lockIndex++,
updateLockIndex()</label>
			<nail x="-850" y="-850"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-323" y="-875">OK[id]?</label>
			<label kind="assignment" x="-323" y="-858">updateResData()</label>
			<nail x="-340" y="-884"/>
			<nail x="-510" y="-918"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<nail x="-714" y="-1224"/>
			<nail x="-646" y="-1224"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-544" y="-1207">possibleToPass()</label>
			<label kind="synchronisation" x="-544" y="-1190">pass[nextCB]!</label>
			<nail x="-578" y="-1156"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-765" y="-1113">hasArrived()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-501" y="-867">notOK[id]?</label>
			<nail x="-552" y="-875"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-450" y="-994">passed[nextCB]!</label>
			<nail x="-340" y="-1020"/>
			<nail x="-595" y="-969"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-1317" y="-833">possibleToLock()</label>
			<label kind="synchronisation" x="-1317" y="-816">reqLock[boxes[lockIndex]][id]
[segments[lockIndex-1]][segments[lockIndex]]!</label>
			<nail x="-1020" y="-884"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-612" y="-740">possibleToReserve()</label>
			<label kind="synchronisation" x="-612" y="-722">reqSeg[boxes[resCBIndex]][id][segments[resSegIndex]]!</label>
			<nail x="-629" y="-790"/>
			<nail x="-612" y="-748"/>
			<nail x="-527" y="-748"/>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<location id="id6" x="0" y="136">
			<name x="8" y="110">Initialized</name>
		</location>
		<location id="id7" x="0" y="0">
			<name x="-10" y="-34">Uninitialized</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="8" y="51">start!</label>
		</transition>
	</template>
	<template>
		<name>CB</name>
		<parameter>cB_id id</parameter>
		<declaration>segV_id segments[3];
segV_id connected =-1;
pV_id point = -1;

tV_id res[3] = {-1, -1, -1};
int[0,2] result;
tV_id tid = -1;
tV_id lockedBy = -1;

const int ERROR = 0;
const int NOSWITCH = 1;
const int DOSWITCH = 2;

void setInfo() {
    segments[0] = cBs[id][0];
    segments[1] = cBs[id][1];
    segments[2] = cBs[id][2];
    point = points[id];
    connected = segments[1];

    if(point != -1 &amp;&amp; !pointInPlus[point]){
        connected = segments[2];
    }

    for(i : t_id) {
        if (initialRes[i].cb == id) {
            seg_id s = initialRes[i].seg;
            if(s == segments[0]){
                res[0] = i;
            } else if (s == segments[1]){
                res[1] = i;
            } else {
                res[2] = i;
            }
        }
    }
}

bool reserve(t_id tid, seg_id sid){
  if(segments[0] == sid &amp;&amp; res[0] == -1){
      res[0] = tid;
      return true;
  } else if (segments[1] == sid &amp;&amp; res[1] == -1){
      res[1] = tid;
      return true;
  } else if (segments[2] == sid &amp;&amp; res[2] == -1){
      res[2] = tid;
      return true;
  } else {
    return false;
  }
}

int[0,2] lock(t_id tid, seg_id s1, seg_id s2){
  if(lockedBy == -1 &amp;&amp; (s1 != s2) &amp;&amp; (s1 == segments[0] || s2 == segments[0]) &amp;&amp; (s1 == segments[0] || s1 == segments[1] || s1 == segments[2]) &amp;&amp; (s2 == segments[0] || s2 == segments[1] || s2 == segments[2])){
      if((s1 == segments[0] &amp;&amp; s2 != connected) || (s2 == segments[0] &amp;&amp; s1 != connected)){
        return DOSWITCH;
      } else if ((s1 == segments[0] &amp;&amp; s2 == connected) || (s2 == segments[0] &amp;&amp; s1 == connected)){
        return NOSWITCH;
      }
   }
   return ERROR;
}


void clear(){
     lockedBy = -1;

     res[0] = -1;
     if(connected == segments[1]) {
        res[1] = -1;
     } else {
        res[2] = -1;
     }
}

void updateConnected(){
    if(connected == segments[1]){
        connected = segments[2];
    } else {
        connected = segments[1];
    }
}

bool isWellFormed(){
    return cBIsWellFormed(cBs[id]) &amp;&amp; pointIsWellFormed(id);
}</declaration>
		<location id="id8" x="-986" y="34">
			<name x="-1020" y="8">Initial</name>
		</location>
		<location id="id9" x="-1139" y="-68">
			<name x="-1164" y="-102">Passing</name>
		</location>
		<location id="id10" x="-356" y="-34">
			<name x="-366" y="-68">Switching</name>
		</location>
		<location id="id11" x="-884" y="-306">
			<name x="-940" y="-338">ReserveAttempted</name>
		</location>
		<location id="id12" x="-170" y="-34">
			<name x="-154" y="-42">Switched</name>
		</location>
		<location id="id13" x="-646" y="-34">
			<name x="-680" y="-17">LockAttempted</name>
		</location>
		<location id="id14" x="-884" y="-68">
			<name x="-858" y="-93">Idle</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id8"/>
			<target ref="id14"/>
			<label kind="guard" x="-969" y="34">isWellFormed()</label>
			<label kind="synchronisation" x="-943" y="-8">start?</label>
			<label kind="assignment" x="-969" y="51">setInfo()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-1079" y="-136">passed[id]?</label>
			<label kind="assignment" x="-1079" y="-119">clear()</label>
			<nail x="-1020" y="-102"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-331" y="-34">OKp[point]?</label>
			<label kind="assignment" x="-331" y="-17">updateConnected()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-458" y="-153">result == NOSWITCH</label>
			<nail x="-646" y="-136"/>
			<nail x="-322" y="-136"/>
			<nail x="-170" y="-136"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-1105" y="-34">pass[id]?</label>
			<nail x="-952" y="-51"/>
			<nail x="-1020" y="-34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="guard" x="-569" y="-68">result == DOSWITCH</label>
			<label kind="synchronisation" x="-569" y="-51">switchPoint[point]!</label>
			<nail x="-373" y="-34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-782" y="-34">result == ERROR</label>
			<label kind="synchronisation" x="-782" y="-17">notOK[tid]!</label>
			<label kind="assignment" x="-782" y="0">tid = -1</label>
			<nail x="-816" y="-34"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-807" y="-289">!result</label>
			<label kind="synchronisation" x="-807" y="-272">notOK[tid]!</label>
			<label kind="assignment" x="-807" y="-255">tid = -1</label>
			<nail x="-816" y="-272"/>
			<nail x="-816" y="-136"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-926" y="-238">result</label>
			<label kind="synchronisation" x="-943" y="-221">OK[tid]!</label>
			<label kind="assignment" x="-943" y="-204">tid = -1</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="select" x="-790" y="-187">i : t_id,
j : seg_id,
k : seg_id</label>
			<label kind="guard" x="-790" y="-136">lockedBy == -1</label>
			<label kind="synchronisation" x="-790" y="-119">reqLock[id][i][j][k]?</label>
			<label kind="assignment" x="-790" y="-102">result = lock(i,j,k),
tid = i</label>
			<nail x="-714" y="-68"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="select" x="-1088" y="-263">i : t_id,
j : seg_id</label>
			<label kind="synchronisation" x="-1088" y="-229">reqSeg[id][i][j]?</label>
			<label kind="assignment" x="-1088" y="-212">result = reserve(i,j),
tid = i</label>
			<nail x="-952" y="-136"/>
			<nail x="-952" y="-272"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-722" y="34">OK[tid]!</label>
			<label kind="assignment" x="-722" y="51">lockedBy = tid,
tid = -1</label>
			<nail x="-170" y="34"/>
			<nail x="-884" y="34"/>
		</transition>
	</template>
	<template>
		<name>Point</name>
		<parameter>p_id id</parameter>
		<location id="id15" x="136" y="-85">
			<name x="102" y="-119">SwitchingPM</name>
		</location>
		<location id="id16" x="136" y="153">
		</location>
		<location id="id17" x="136" y="68">
			<name x="102" y="34">SwitchingMP</name>
		</location>
		<location id="id18" x="340" y="0">
			<name x="330" y="-30">Minus</name>
		</location>
		<location id="id19" x="-68" y="0">
			<name x="-78" y="-30">Plus</name>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="guard" x="238" y="119">!pointInPlus[id]</label>
			<label kind="synchronisation" x="289" y="136">start?</label>
			<nail x="340" y="153"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="guard" x="-51" y="119">pointInPlus[id]</label>
			<label kind="synchronisation" x="-50" y="136">start?</label>
			<nail x="-68" y="153"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-42" y="-68">switchPoint[id]?</label>
			<nail x="34" y="-42"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="212" y="42">switchPoint[id]?</label>
			<nail x="238" y="34"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="221" y="-68">OKp[id]!</label>
			<nail x="238" y="-42"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="0" y="42">OKp[id]!</label>
			<nail x="34" y="34"/>
		</transition>
	</template>
	<system>system Initializer, TCC, CB, Point;</system>
	<queries>
		<query>
			<formula>A[] forall(i:cB_id) (Initializer.Initialized imply not(CB(i).Initial))
			</formula>
			<comment>All CB are well-formed

(Initializer.Initialized --&gt; forall(i:cB_id) not(CB(i).Initial))
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (Initializer.Initialized imply not(TCC(i).Initial))
			</formula>
			<comment>All TCC are well-formed
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) not(CB(i).Switching) &amp;&amp; CB(i).stem != -1 &amp;&amp; CB(i).plus != -1 &amp;&amp; CB(i).minus != -1 &amp;&amp; CB(i).connected != -1 &amp;&amp; points[i] != -1 imply (Point(points[i]).Plus &amp;&amp; CB(i).connected == cBs[i][1]) || (Point(points[i]).Minus &amp;&amp; CB(i).connected == cBs[i][2])
			</formula>
			<comment>The local state information about connected segments of a switch box is consistent with the actual state of the switch.
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>A train can only cross a point if the point's position is consistent with the segment that the trains is entering.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (TCC(i).curSeg == CB(TCC(i).boxes[TCC(i).nextSegIndex-1]).connected) || (TCC(i).curSeg == CB(TCC(i).boxes[TCC(i).nextSegIndex-1]).segments[0])
			</formula>
			<comment>No derailment.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (TCC(i).DoubleSegment imply points[TCC(i).nextCB] == -1 || Point(points[TCC(i).nextCB]).Plus || Point(points[TCC(i).nextCB]).Minus)
			</formula>
			<comment>No derailment. A train can only be in a double segment position at a point that is not in the middle of switching.
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>A train's current segment is either the same as its next segment or connected to it.
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) TCC(i).Arrived
			</formula>
			<comment>All trains will eventually arrive at their destinations.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:t_id) i != j and not(TCC(i).Initial) and not(TCC(j).Initial) imply TCC(i).curSeg != TCC(j).curSeg
			</formula>
			<comment>Two trains are never on the same segment after the initialization step.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) TCC(i).validRoute()
			</formula>
			<comment>All trains must have a valid route composition. This means that the actual route must be greater than -1 and the padding must be -1.
			</comment>
		</query>
		<query>
			<formula>A[] forall(id:t_id) forall(i:cB_id) TCC(id).Initial or (TCC(id).boxes[i] == boxRoutes[id][i] and not(TCC(id).Initial))
			</formula>
			<comment>A trains internal notion of the control boxes will always be the same as its global counterpart after it has left the initial state
			</comment>
		</query>
		<query>
			<formula>A[] forall(id:t_id) forall(i:seg_id) TCC(id).Initial or (TCC(id).segments[i] == segRoutes[id][i] and not(TCC(id).Initial))
			</formula>
			<comment>A trains internal notion of its route will always be the same as its global counterpart after it has left the initial state
			</comment>
		</query>
	</queries>
</nta>
