//Smallest network
//Configuration Data - Part 1
const int NCB = 5;
const int NSEG = 5;
const int NTRAIN = 2;
const int NPOINT = 2;
const int NROUTELENGTH = 4;

//TYPES
typedef int[0, NTRAIN-1] t_id;
typedef int[0, NCB-1]  cB_id;
typedef int[0, NPOINT-1] p_id;
typedef int[0, NSEG-1] seg_id;
typedef int[-1, NSEG-1] segV_id;
typedef int[-1, NPOINT-1] pV_id;
typedef int[-1, NCB-1] cBV_id;
typedef int[-1, NTRAIN-1] tV_id;
typedef int[0, NROUTELENGTH] cBRoute_i;
typedef int[0, NROUTELENGTH-1] segRoute_i;
typedef struct {
    cB_id cb;
    seg_id seg;
} reservation;

//Configuration Data - Part 2
const int[1,NCB] lockLimit = 2;
const int[1,NSEG] resLimit = 2;

const segV_id segRoutes[NTRAIN][NROUTELENGTH] = {{0,1,2,4}, {4,3,1,0}};
const cBV_id boxRoutes[NTRAIN][NROUTELENGTH+1]= {{0,1,2,3,4}, {4,3,2,1,0}};
const segV_id cBs[NCB][3]= {{0,-1,-1}, {0,1,-1}, {1,2,3}, {4,2,3}, {4,-1,-1}};
const pV_id points[NCB] = {-1, -1, 0, 1, -1};
const reservation initialRes[NTRAIN] = {{1,0}, {3,4}};
bool pointInPlus[NPOINT] = {true, true};
