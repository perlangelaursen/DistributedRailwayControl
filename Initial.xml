<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//const int TRAINS = 2;
//typedef int[0, TRAINS-1] t_id;
//int routes[TRAINS][3] = {{0,1,3}, {3,2,1}};

const int SEGSIZE = 2;
const int reservations = 2;

//TYPES
typedef struct 
{ 
  int id;
  int sbs[SEGSIZE];
  //int sb1;
  //int sb2;
} Seg;



//CONSTANTS
const int NSB = 4; //Number of switch boxes
const int Nseg = 4; //Number of segments
const int Nt = 2; //Number of trains
const Seg none = {-1, {-1, -1}};
const Seg s0 = {0, {0, 1}}; 
const Seg s1 = {1, {1, 2}};
const Seg s2 = {2, {1, 2}};
const Seg s3 = {3, {2, 3}};
const Seg segments[Nseg] = {s0, s1, s2, s3};

typedef int[0, Nt-1] t_id;
typedef int[0, NSB-1] SB_id;
const Seg routes[Nt][Nseg]= {{s0,s1,s3,none}, {s3, s2,s0, none}};
const int[0,1] directions[Nt]= {0,1}; //0 = left to right, 1 = right to left
const int SBs[NSB][3]= {{0,-1,-1}, {0,1,2}, {3,1,2}, {3,-1,-1}}; //(stem, plus, minus)
/*
const int NSB = 10; //Number of switch boxes
const int Nseg = 9; //Number of segments
const int Nt = 2; //Number of trains
const Seg none = {-1, {-1, -1}};
const Seg s0 = {0, {0, 1}};  //Left to right
const Seg s1 = {1, {1, 2}};
const Seg s2 = {2, {1, 3}};
const Seg s3 = {3, {3, 4}};
const Seg s4 = {4, {5, 3}};
const Seg s5 = {5, {6, 5}};
const Seg s6 = {6, {5, 7}};
const Seg s7 = {7, {7, 8}};
const Seg s8 = {8, {7, 9}};
const Seg segments[Nseg] = {s0, s1, s2, s3, s4, s5, s6, s7, s8};


typedef int[0, Nt-1] t_id;
typedef int[0, NSB-1] SB_id;
const Seg routes[Nt][4]= {{s0,s2,s3,none}, {s3, s4,s5, none}};
const int[0,1] directions[Nt]= {0,1}; //0 = left to right, 1 = right to left
const int SBs[NSB][3]= {{0,-1,-1}, {0,1,2}, {1,-1,-1}, {3,4,2}, {3,-1,-1}, {5,6,4}, {5,-1,-1}, {6,7,8}, {7,-1,-1}, {8,-1,-1}}; //(stem, plus, minus)
*/


//VARIABLES
chan resSeg[NSB][Nt][Nseg]; //[switch box][train id][segment id]
chan switchh[NSB];
chan reqLock[NSB][Nt][Nseg][Nseg]; //lock sb for t between two segments
chan OK[Nt];
chan notOK[Nt];
chan pass[NSB][Nt]; //t passing s connected to sb
chan OKsb[NSB];

//BACKUP
//int msg[NSB];
//int reservations[NSB][3] = {{-1,-1,-1},{0,-1,-1},{1,-1,-1},{-1,-1,-1}}; //SBid -&gt; (Tid, Tid, Tid)
//int segments[NSB][3] = {{0,-1,-1}, {0,1,2}, {3,1,2}, {3,-1,-1}};
//int locks[NSB] = {-1,-1,-1,-1};
//int[0,NSB-1] segToSBs[NSB][2] = {{0,1},{1,2},{1,2},{2,3}}; //SegmentID -&gt; SBIDs
//int switchPos[NSB]; //SBID -&gt; Seg

</declaration>
	<template>
		<name x="5" y="5">TCC</name>
		<parameter>t_id id</parameter>
		<declaration>const int length = 3;

int i = 1;
Seg next;
Seg curSeg;
int nextSB;
//int prevSB;
int sb = 0;
int li = 1;
int ri = 1;

int reachedSBReservation(){
   if (!directions[id]){
      return routes[id][li].sbs[0];
    } else {
      return routes[id][li].sbs[1];
    }
}</declaration>
		<location id="id0" x="-773" y="161">
		</location>
		<location id="id1" x="-952" y="-348">
			<name x="-962" y="-382">Initial</name>
			<committed/>
		</location>
		<location id="id2" x="-952" y="-208">
			<name x="-935" y="-221">Initial5</name>
			<committed/>
		</location>
		<location id="id3" x="-952" y="-280">
			<name x="-935" y="-289">Initial4</name>
			<committed/>
		</location>
		<location id="id4" x="-773" y="-357">
			<name x="-797" y="-389">Arrived</name>
		</location>
		<location id="id5" x="-255" y="-161">
			<name x="-265" y="-191">Reserving</name>
		</location>
		<location id="id6" x="-776" y="-160">
			<name x="-880" y="-192">SingleSegment</name>
		</location>
		<location id="id7" x="-1062" y="-17">
			<name x="-1086" y="-1">Locking</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-875" y="42">notOK[id]?</label>
			<nail x="-824" y="17"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-918" y="-34">notOK[id]?</label>
			<nail x="-858" y="0"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1011" y="0">OK[id]?</label>
			<label kind="assignment" x="-1011" y="17">li++</label>
			<nail x="-901" y="-59"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-459" y="-51">OK[id]?</label>
			<label kind="assignment" x="-459" y="-34">sb:=sb^1,
ri:=(sb==0) ? ri+1 : ri</label>
			<nail x="-518" y="-25"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="assignment" x="-1181" y="-357">curSeg := routes[id][0],
nextSB:=curSeg.sbs[1^directions[id]],
next := routes[id][i]</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<nail x="-821" y="-437"/>
			<nail x="-717" y="-437"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1275" y="-263">resSeg[curSeg.sbs[1^directions[id]]][id][curSeg.id]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1008" y="-192">OK[id]?</label>
			<nail x="-952" y="-160"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id0"/>
			<label kind="guard" x="-654" y="-17">ri &gt; i</label>
			<label kind="synchronisation" x="-654" y="0">pass[nextSB][id]!</label>
			<nail x="-663" y="17"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-765" y="-340">i&gt;=length || routes[id][i] == none</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-552" y="-110">notOK[id]?</label>
			<nail x="-527" y="-76"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-773" y="-17">OK[id]?</label>
			<label kind="assignment" x="-773" y="0">curSeg := next,
i++,
nextSB:=curSeg.sbs[1^directions[id]],
next := routes[id][i]</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-1207" y="-127">li&lt;length &amp;&amp; routes[id][li] != none</label>
			<label kind="synchronisation" x="-1207" y="-110">reqLock[reachedSBReservation()][id][curSeg.id][next.id]!</label>
			<nail x="-935" y="-85"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-671" y="-221">ri &lt; length &amp;&amp; routes[id][ri] != none</label>
			<label kind="synchronisation" x="-671" y="-204">resSeg[routes[id][ri].sbs[directions[id]^sb]][id][routes[id][ri].id]!</label>
			<nail x="-314" y="-161"/>
		</transition>
	</template>
	<template>
		<name>SB</name>
		<parameter>SB_id id</parameter>
		<declaration>int res[3] = {-1, -1, -1};
bool result;
int tid = -1;
int lockedBy = -1;
bool dir = true; //plus = true, minus = false
bool sw = false;

bool reserve(int tid, int sid){
  Seg s = segments[sid];
  if (SBs[id][0] == s.id){
	if (res[0] == -1){
		res[0] = tid;
		return true;
	}
	return false;
  } else if (SBs[id][1] == s.id){
	if(res[1] == -1){
		res[1] = tid;
		return true;
	}
	return false;
  } else if (SBs[id][2] == s.id){
	if(res[2] == -1){
		res[2] = tid;
		return true;
	}
	return false;
  }
  return false;
}

bool lock(int tid, int s1, int s2){
  if(lockedBy == -1 &amp;&amp; (s1 != s2) &amp;&amp; (s1 == SBs[id][0] || s2 == SBs[id][0])){
      int s = 0;
      for (i:int[0,2]){
        if(SBs[id][i] == s1){
           if(res[i] == tid) {
               s++;
           }
        }
        if(SBs[id][i] == s2 ){
            if(res[i] == tid){
               s++;
            }
        }
      }
      if (s==2){
        lockedBy = tid;
        return true;
      }
    }
    return false;
}


bool clear(int tid){
  if (lockedBy == tid){
      lockedBy = -1;

      for (i : int[0,2]) 
      {
        if(res[i] == tid){
            res[i] = -1;
        }
      }
      return true;
    }
    return false;
}

bool swDir(int s1, int s2){ //+ = true, - = false
  if (!dir &amp;&amp; (SBs[id][1] == s1 || SBs[id][1] == s2)){
	dir = true;
	return true;
  } else if (dir &amp;&amp; (SBs[id][2] == s1 || SBs[id][2] == s2)) {
	dir = false;
	return true;
  }
  return false;
}</declaration>
		<location id="id8" x="-1147" y="-85">
		</location>
		<location id="id9" x="-255" y="-136">
		</location>
		<location id="id10" x="-368" y="-80">
		</location>
		<location id="id11" x="-880" y="-328">
			<name x="-936" y="-360">ReserveAttempted</name>
		</location>
		<location id="id12" x="-144" y="-85">
			<name x="-128" y="-93">Switched</name>
		</location>
		<location id="id13" x="-528" y="-80">
			<name x="-576" y="-112">LockAttempted</name>
		</location>
		<location id="id14" x="-880" y="-80">
			<name x="-920" y="-112">Idle</name>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id8"/>
			<target ref="id14"/>
			<label kind="guard" x="-1045" y="-102">result</label>
			<label kind="synchronisation" x="-1045" y="-85">OK[tid]!</label>
			<label kind="assignment" x="-1037" y="-76">tid:=-1</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id14"/>
			<label kind="guard" x="-1129" y="-144">!result</label>
			<label kind="synchronisation" x="-1129" y="-127">notOK[tid]!</label>
			<label kind="assignment" x="-1129" y="-110">tid:=-1</label>
			<nail x="-1020" y="-136"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-237" y="-127">OKsb[id]?</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="guard" x="-272" y="-42">!sw</label>
			<nail x="-255" y="-42"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id8"/>
			<label kind="select" x="-1147" y="-51">i : int[0,Nt-1]</label>
			<label kind="synchronisation" x="-1130" y="-34">pass[id][i]?</label>
			<label kind="assignment" x="-1130" y="-17">result:=clear(i),
tid:=i</label>
			<nail x="-918" y="-59"/>
			<nail x="-1003" y="-17"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-357" y="-144">sw</label>
			<label kind="synchronisation" x="-374" y="-127">switchh[id]!</label>
			<nail x="-306" y="-110"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-728" y="-32">!result</label>
			<label kind="synchronisation" x="-728" y="-16">notOK[tid]!</label>
			<label kind="assignment" x="-728" y="0">tid:=-1</label>
			<nail x="-712" y="-32"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-792" y="-240">!result</label>
			<label kind="synchronisation" x="-792" y="-224">notOK[tid]!</label>
			<label kind="assignment" x="-792" y="-208">tid := -1</label>
			<nail x="-800" y="-280"/>
			<nail x="-800" y="-152"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-920" y="-240">result</label>
			<label kind="synchronisation" x="-920" y="-224">OK[tid]!</label>
			<label kind="assignment" x="-928" y="-208">tid := -1</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="select" x="-688" y="-272">i : int[0,Nt-1],
j : int[0,Nseg-1],
k : int[0,Nseg-1]</label>
			<label kind="guard" x="-688" y="-216">lockedBy == -1</label>
			<label kind="synchronisation" x="-688" y="-200">reqLock[id][i][j][k]?</label>
			<label kind="assignment" x="-688" y="-187">result:=lock(i,j,k),
tid:=i,
sw:=swDir(j,k)</label>
			<nail x="-712" y="-128"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="select" x="-1072" y="-256">i : int[0,Nt-1],
j : int[0,Nseg-1]</label>
			<label kind="synchronisation" x="-1072" y="-224">resSeg[id][i][j]?</label>
			<label kind="assignment" x="-1080" y="-208">result:=reserve(i,j),
tid:=i</label>
			<nail x="-968" y="-152"/>
			<nail x="-968" y="-272"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-608" y="64">OK[lockedBy]!</label>
			<nail x="-144" y="59"/>
			<nail x="-880" y="64"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="guard" x="-464" y="-80">result</label>
			<label kind="assignment" x="-464" y="-64">tid:=-1</label>
		</transition>
	</template>
	<template>
		<name>Point</name>
		<parameter>SB_id id</parameter>
		<declaration>bool reply;</declaration>
		<location id="id15" x="144" y="68">
		</location>
		<location id="id16" x="144" y="-59">
		</location>
		<location id="id17" x="297" y="0">
			<name x="287" y="-30">Minus</name>
		</location>
		<location id="id18" x="0" y="0">
			<name x="-10" y="-30">Plus</name>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="guard" x="399" y="-42">reply</label>
			<label kind="synchronisation" x="391" y="-25">OKsb[id]!</label>
			<label kind="assignment" x="399" y="-8">reply:=false</label>
			<nail x="382" y="-59"/>
			<nail x="382" y="59"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="guard" x="-76" y="-85">reply</label>
			<label kind="synchronisation" x="-76" y="-68">OKsb[id]!</label>
			<label kind="assignment" x="-68" y="-51">reply:=false</label>
			<nail x="-93" y="-51"/>
			<nail x="-93" y="59"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="17" y="-93">!reply</label>
			<label kind="synchronisation" x="17" y="-76">switchh[id]?</label>
			<label kind="assignment" x="25" y="-59">reply:=true</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id15"/>
			<label kind="guard" x="238" y="17">!reply</label>
			<label kind="synchronisation" x="229" y="34">switchh[id]?</label>
			<label kind="assignment" x="229" y="51">reply:=true</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id18"/>
		</transition>
	</template>
	<template>
		<name>ControlSystem</name>
		<declaration>void initialize(int&amp; msg[NSB])
{
  for (i : int[0,NSB-1]) 
  {
    msg[i] = -1;
  }
}</declaration>
		<location id="id19" x="136" y="0">
		</location>
		<location id="id20" x="-144" y="0">
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
		</transition>
	</template>
	<template>
		<name>Train</name>
		<location id="id21" x="-312" y="-152">
			<name x="-344" y="-184">DoubleSegment</name>
		</location>
		<location id="id22" x="-512" y="-152">
			<name x="-568" y="-184">SingleSegment</name>
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<nail x="-408" y="-104"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<nail x="-408" y="-208"/>
		</transition>
	</template>
	<system>system TCC, SB, Point;</system>
	<queries>
		<query>
			<formula>A[] forall(i:t_id) (not(TCC(i).Initial) &amp;&amp; TCC(i).next.sbs[0] != TCC(i).next.sbs[1]) imply ( TCC(i).curSeg.sbs[1] == TCC(i).next.sbs[0] || TCC(i).curSeg.sbs[0] == TCC(i).next.sbs[1] || TCC(i).curSeg == TCC(i).next)
			</formula>
			<comment>No derailment; A train's current segment is either the same as its next segment or connected to it.
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) TCC(i).Arrived
			</formula>
			<comment>All trains will eventually arrive at their destinations.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:t_id) i != j and not(TCC(i).Initial) and not(TCC(j).Initial) imply TCC(i).curSeg != TCC(j).curSeg
			</formula>
			<comment>Two trains are never on the same segment after the initialization step.
			</comment>
		</query>
	</queries>
</nta>
