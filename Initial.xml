<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//const int TRAINS = 2;
//typedef int[0, TRAINS-1] t_id;
//int routes[TRAINS][3] = {{0,1,3}, {3,2,1}};

//TYPES
typedef struct 
{ 
  int id;
  int sb1;
  int sb2;
} Seg;



//CONSTANTS
/*const int NSB = 4; //Number of switch boxes
const int Nseg = 4; //Number of segments
const int Nt = 2; //Number of trains
const Seg none = {-1, -1, -1};
const Seg s0 = {0, 0, 1}; 
const Seg s1 = {1, 1, 2};
const Seg s2 = {2, 1, 2};
const Seg s3 = {3, 2, 3};
const Seg segments[Nseg] = {s0, s1, s2, s3};

typedef int[0, Nt-1] t_id;
typedef int[0, NSB-1] SB_id;
const Seg routes[Nt][Nseg]= {{s0,s1,s3,none}, {s3, s2,s0, none}};
const bool directions[Nt]= {true,false};
const int SBs[NSB][3]= {{0,-1,-1}, {0,1,2}, {3,1,2}, {3,-1,-1}}; //(stem, plus, minus)*/

const int NSB = 10; //Number of switch boxes
const int Nseg = 9; //Number of segments
const int Nt = 2; //Number of trains
const Seg none = {-1, -1, -1};
const Seg s0 = {0, 0, 1};  //Left to right
const Seg s1 = {1, 1, 2};
const Seg s2 = {2, 1, 3};
const Seg s3 = {3, 3, 4};
const Seg s4 = {4, 5, 3};
const Seg s5 = {5, 6, 5};
const Seg s6 = {6, 5, 7};
const Seg s7 = {7, 7, 8};
const Seg s8 = {8, 7, 9};
const Seg segments[Nseg] = {s0, s1, s2, s3, s4, s5, s6, s7, s8};

typedef int[0, Nt-1] t_id;
typedef int[0, NSB-1] SB_id;
typedef int[0, NSB-1] SW_id;
const Seg routes[Nt][4]= {{s0,s2,s3,none}, {s3, s4,s5, none}};
const bool directions[Nt]= {true,false};
const int SBs[NSB][3]= {{0,-1,-1}, {0,1,2}, {1,-1,-1}, {3,4,2}, {3,-1,-1}, {5,6,4}, {5,-1,-1}, {6,7,8}, {7,-1,-1}, {8,-1,-1}}; //(stem, plus, minus)



//VARIABLES
chan resSeg[NSB][Nt][Nseg]; //[switch box][train id][segment id]
chan switchh[NSB];
chan reqLock[NSB][Nt][Nseg][Nseg]; //lock sb for t between two segments
chan move[Nt];
chan OK[Nt];
chan notOK[Nt];
chan pass[NSB][Nt][Nseg]; //t passing s connected to sb

//BACKUP
//int msg[NSB];
//int reservations[NSB][3] = {{-1,-1,-1},{0,-1,-1},{1,-1,-1},{-1,-1,-1}}; //SBid -&gt; (Tid, Tid, Tid)
//int segments[NSB][3] = {{0,-1,-1}, {0,1,2}, {3,1,2}, {3,-1,-1}};
//int locks[NSB] = {-1,-1,-1,-1};
//int[0,NSB-1] segToSBs[NSB][2] = {{0,1},{1,2},{1,2},{2,3}}; //SegmentID -&gt; SBIDs
//int switchPos[NSB]; //SBID -&gt; Seg

</declaration>
	<template>
		<name x="5" y="5">TCC</name>
		<parameter>t_id id</parameter>
		<declaration>const int length = 3;
const int NSEG = 4;
int i = 1;
Seg next;
Seg curSeg;
int nextSB;
int prevSB;

void updateSBinfo(){
  if (directions[id]){
	prevSB = curSeg.sb1;
	nextSB = curSeg.sb2;
  } else {
	prevSB = curSeg.sb2;
	nextSB = curSeg.sb1;
  }
}</declaration>
		<location id="id0" x="-1105" y="-459">
			<name x="-1115" y="-493">Initial</name>
			<committed/>
		</location>
		<location id="id1" x="-952" y="-352">
			<committed/>
		</location>
		<location id="id2" x="-952" y="-208">
			<committed/>
		</location>
		<location id="id3" x="-952" y="-456">
			<committed/>
		</location>
		<location id="id4" x="-952" y="-280">
			<committed/>
		</location>
		<location id="id5" x="-776" y="-56">
		</location>
		<location id="id6" x="-776" y="-296">
			<name x="-800" y="-328">Arrived</name>
		</location>
		<location id="id7" x="144" y="-160">
			<name x="134" y="-190">Reserving2</name>
		</location>
		<location id="id8" x="-304" y="-160">
			<name x="-314" y="-190">Reserving1</name>
		</location>
		<location id="id9" x="-776" y="-160">
			<name x="-880" y="-192">SingleSegment</name>
		</location>
		<location id="id10" x="-776" y="56">
			<name x="-896" y="48">DoubleSegment</name>
		</location>
		<location id="id11" x="-272" y="56">
			<name x="-296" y="72">Locking</name>
		</location>
		<location id="id12" x="320" y="-160">
			<name x="280" y="-192">Reserved2</name>
		</location>
		<location id="id13" x="-112" y="-160">
			<name x="-144" y="-192">Reserved1</name>
		</location>
		<location id="id14" x="-576" y="-160">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="assignment" x="-1087" y="-457">curSeg := routes[id][0]</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<nail x="-824" y="-376"/>
			<nail x="-720" y="-376"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-32" y="-32">notOK[id]?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1176" y="-256">resSeg[curSeg.sb2][id][curSeg.id]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-1012" y="-331">OK[id]?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-1184" y="-416">resSeg[curSeg.sb1][id][curSeg.id]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-1008" y="-192">OK[id]?</label>
			<nail x="-952" y="-160"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-960" y="-16">pass[nextSB][id][curSeg.id]!</label>
			<nail x="-776" y="0"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="-768" y="-280">i&gt;=length || routes[id][i] == none</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-8" y="-96">notOK[id]?</label>
			<nail x="24" y="-96"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="216" y="-184">OK[id]?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-72" y="-272">resSeg[next.sb2][id][next.id]!</label>
			<nail x="16" y="-248"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-464" y="-88">notOK[id]?</label>
			<nail x="-432" y="-96"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-224" y="-184">OK[id]?</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<label kind="guard" x="-736" y="-216">i&lt;length &amp;&amp; routes[id][i] != none</label>
			<label kind="assignment" x="-736" y="-200">next := routes[id][i],
updateSBinfo()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-952" y="-128">pass[prevSB][id][curSeg.id]!</label>
			<label kind="assignment" x="-872" y="-112">curSeg := next,
i++</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-552" y="56">move[id]?</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-40" y="64">reqLock[nextSB][id][curSeg.id][next.id]!</label>
			<nail x="320" y="56"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-520" y="-256">resSeg[next.sb1][id][next.id]!</label>
			<nail x="-432" y="-232"/>
		</transition>
	</template>
	<template>
		<name>SB</name>
		<parameter>SB_id id</parameter>
		<declaration>int res[3] = {-1, -1, -1};
bool result;
int tid = -1;
int lockedBy = -1;
bool dir = true; //plus = true, minus = false
bool sw = false;

bool reserve(int tid, int sid){
  Seg s = segments[sid];
  if (SBs[id][0] == s.id){
	if (res[0] == -1){
		res[0] = tid;
		return true;
	}
	return false;
  } else if (SBs[id][1] == s.id){
	if(res[1] == -1){
		res[1] = tid;
		return true;
	}
	return false;
  } else if (SBs[id][2] == s.id){
	if(res[2] == -1){
		res[2] = tid;
		return true;
	}
	return false;
  }
  return false;
}

bool lock(int tid, int s1, int s2){
  if(lockedBy == -1 &amp;&amp; (s1 == SBs[id][0] || s2 == SBs[id][0])){
	lockedBy = tid;
  	return true;
  }
  return false;
}


void clear(int tid, int sid){
  Seg s = segments[sid];

  if (lockedBy == tid){
 	lockedBy = -1;
  }

  if (SBs[id][0] == s.id){
	res[0] = -1;
  } else if (SBs[id][1] == s.id){
	res[1] = -1;
  } else if (SBs[id][2] == s.id){
	res[2] = -1;
  }
}

bool swDir(int s1, int s2){ //+ = true, - = false
  if (!dir &amp;&amp; (SBs[id][1] == s1 || SBs[id][1] == s2)){
	dir = true;
	return true;
  } else if (dir &amp;&amp; (SBs[id][2] == s1 || SBs[id][2] == s2)) {
	dir = false;
	return true;
  }
  return false;
}</declaration>
		<location id="id15" x="-368" y="-80">
		</location>
		<location id="id16" x="-880" y="-328">
			<name x="-936" y="-360">ReserveAttempted</name>
		</location>
		<location id="id17" x="-232" y="-80">
			<name x="-216" y="-88">Switched</name>
		</location>
		<location id="id18" x="-528" y="-80">
			<name x="-576" y="-112">LockAttempted</name>
		</location>
		<location id="id19" x="-880" y="-80">
			<name x="-920" y="-112">Idle</name>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="guard" x="-312" y="-48">!sw</label>
			<nail x="-304" y="-48"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="select" x="-1120" y="-128">i : int[0,Nt-1],
j : int[0,Nseg-1]</label>
			<label kind="synchronisation" x="-1104" y="-96">pass[id][i][j]?</label>
			<label kind="assignment" x="-1088" y="-80">clear(i, j)</label>
			<nail x="-1024" y="-32"/>
			<nail x="-1024" y="-120"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="guard" x="-328" y="-152">sw</label>
			<label kind="synchronisation" x="-328" y="-136">switchh[id]!</label>
			<nail x="-304" y="-120"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="-728" y="-32">!result</label>
			<label kind="synchronisation" x="-728" y="-16">notOK[tid]!</label>
			<label kind="assignment" x="-728" y="0">tid:=-1</label>
			<nail x="-712" y="-32"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="guard" x="-792" y="-240">!result</label>
			<label kind="synchronisation" x="-792" y="-224">notOK[tid]!</label>
			<label kind="assignment" x="-792" y="-208">tid := -1</label>
			<nail x="-800" y="-280"/>
			<nail x="-800" y="-152"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="guard" x="-920" y="-240">result</label>
			<label kind="synchronisation" x="-920" y="-224">OK[tid]!</label>
			<label kind="assignment" x="-928" y="-208">tid := -1</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="select" x="-688" y="-272">i : int[0,Nt-1],
j : int[0,Nseg-1],
k : int[0,Nseg-1]</label>
			<label kind="guard" x="-688" y="-216">lockedBy == -1</label>
			<label kind="synchronisation" x="-688" y="-200">reqLock[id][i][j][k]?</label>
			<label kind="assignment" x="-688" y="-187">result:=lock(i,j,k),
tid:=i,
sw:=swDir(j,k)</label>
			<nail x="-712" y="-128"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="select" x="-1072" y="-256">i : int[0,Nt-1],
j : int[0,Nseg-1]</label>
			<label kind="synchronisation" x="-1072" y="-224">resSeg[id][i][j]?</label>
			<label kind="assignment" x="-1080" y="-208">result:=reserve(i,j),
tid:=i</label>
			<nail x="-968" y="-152"/>
			<nail x="-968" y="-272"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-608" y="64">move[lockedBy]!</label>
			<nail x="-232" y="64"/>
			<nail x="-880" y="64"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id15"/>
			<label kind="guard" x="-464" y="-80">result</label>
			<label kind="assignment" x="-464" y="-64">tid:=-1</label>
		</transition>
	</template>
	<template>
		<name>Switch</name>
		<parameter>SW_id id</parameter>
		<location id="id20" x="208" y="0">
			<name x="198" y="-30">Minus</name>
		</location>
		<location id="id21" x="0" y="0">
			<name x="-10" y="-30">Plus</name>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="72" y="48">switchh[id]?</label>
			<nail x="112" y="48"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="72" y="-72">switchh[id]?</label>
			<nail x="104" y="-48"/>
		</transition>
	</template>
	<template>
		<name>ControlSystem</name>
		<declaration>void initialize(int&amp; msg[NSB])
{
  for (i : int[0,NSB-1]) 
  {
    msg[i] = -1;
  }
}</declaration>
		<location id="id22" x="136" y="0">
		</location>
		<location id="id23" x="-144" y="0">
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
		</transition>
	</template>
	<template>
		<name>Train</name>
		<location id="id24" x="-312" y="-152">
			<name x="-344" y="-184">DoubleSegment</name>
		</location>
		<location id="id25" x="-512" y="-152">
			<name x="-568" y="-184">SingleSegment</name>
		</location>
		<init ref="id25"/>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<nail x="-408" y="-104"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<nail x="-408" y="-208"/>
		</transition>
	</template>
	<system>system TCC, SB, Switch;</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) TCC(i).Arrived
			</formula>
			<comment>All trains will eventually arrive
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:t_id) i != j and not(TCC(i).Initial) and not(TCC(j).Initial) imply TCC(i).curSeg != TCC(j).curSeg
			</formula>
			<comment>Two trains are never on the same segment after the initialization step.
			</comment>
		</query>
	</queries>
</nta>
