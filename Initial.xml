<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int NCB = 5; //Number of control boxes
const int NSEG = 5; //Number of segments
const int NT = 2; //Number of trains
const int NSWITCH = 2; //Number of switchable points

//TYPES
typedef int[0, NT-1] t_id; //Train IDs
typedef int[0, NCB-1]  CB_id; //Control box IDs
typedef int[0, NSWITCH-1] SW_id; //Switch IDs
typedef int[0, NSEG-1] Seg_id; //Segment IDs
typedef int[-1, NSEG-1] SegV_id; //Segment IDs with -1
typedef int[-1, NSWITCH-1] SWV_id; //Switch IDs with -1
typedef int[-1, NCB-1] CBV_id; //Control Box IDs with -1
typedef int[-1, NT-1] tV_id; //Train IDs with -1

//EXAMPLE
const int[1,NCB] lockLimit = 2; //Max number of reservation (pairs)
const int[1,NSEG] resLimit = 2; //Max number of locks

const CB_id controlBoxes[NT][NCB] = {{0,1,2,3,4},{4,3,2,1,0}};
const SegV_id routes[NT][NSEG]= {{0,1,2,4,-1}, {4,3,1,0, -1}};
const SegV_id CBs[NCB][3]= {{0,-1,-1}, {0,1,-1}, {1,2,3}, {4,2,3}, {4,-1,-1}}; //(stem, plus, minus)
const SWV_id switches[NCB] = { -1, -1, 0, 1, -1};
const bool initialConnections[NSWITCH] = {true, true};

//Channels
chan resSeg[NCB][NT][NSEG]; //[switch box][train id][segment id]
chan switchh[NCB];
chan reqLock[NCB][NT][NSEG][NSEG]; //lock sb for t between two segments
chan OK[NT];
chan notOK[NT];
chan pass[NCB][NT]; //t passing s connected to sb
chan OKsb[NCB];
</declaration>
	<template>
		<name x="5" y="5">TCC</name>
		<parameter>t_id id</parameter>
		<declaration>Seg_id nextSegIndex = 1;
SegV_id curSeg;
SegV_id nextSeg;
CBV_id nextCB;

int[0,1] resBit = 0;
CB_id resCBIndex = 1;
Seg_id resSegIndex = 1;
CB_id lockIndex = 1;

SegV_id route[NSEG];
CBV_id boxes[NCB];

void copyRouteFromServer() {
    for(i : int[0, NSEG-1]) {
        route[i] = routes[id][i];
    }
    curSeg = route[0];
    nextSeg = route[1];
}

void copyControlBoxInfo() {
    for(i : int[0, NCB-1]) {
        boxes[i] = controlBoxes[id][i];
    }
    nextCB = boxes[resSegIndex];
}

bool possibleToLockSegment() {
    return lockIndex&lt;NSEG &amp;&amp; lockIndex-nextSegIndex &lt; lockLimit &amp;&amp; route[lockIndex] != -1;
}

bool possibleToReserveSegment() {
    return resSegIndex-nextSegIndex &lt; resLimit &amp;&amp; resSegIndex &lt; NSEG &amp;&amp; route[resSegIndex] != -1;
}

bool possibleToCrossBox() {
    return resSegIndex &gt; nextSegIndex &amp;&amp; lockIndex &gt; nextSegIndex;
}

bool hasTrainArrived() {
    return nextSegIndex&gt;=NSEG || route[nextSegIndex] == -1;
}</declaration>
		<location id="id0" x="-442" y="-374">
			<name x="-425" y="-391">CrossingPoint</name>
		</location>
		<location id="id1" x="-1122" y="-374">
			<name x="-1132" y="-408">Initial</name>
			<committed/>
		</location>
		<location id="id2" x="-1122" y="-204">
			<name x="-1105" y="-229">Ready</name>
			<committed/>
		</location>
		<location id="id3" x="-1122" y="-276">
			<name x="-1105" y="-285">InfoCopied</name>
			<committed/>
		</location>
		<location id="id4" x="-782" y="-374">
			<name x="-850" y="-399">Arrived</name>
		</location>
		<location id="id5" x="-442" y="34">
			<name x="-425" y="17">Reserving</name>
		</location>
		<location id="id6" x="-782" y="-170">
			<name x="-909" y="-187">SingleSegment</name>
		</location>
		<location id="id7" x="-1122" y="34">
			<name x="-1146" y="50">Locking</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-935" y="8">notOK[id]?</label>
			<nail x="-850" y="34"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-943" y="-76">OK[id]?</label>
			<label kind="assignment" x="-952" y="-59">lockIndex++</label>
			<nail x="-952" y="-68"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-425" y="-93">OK[id]?</label>
			<label kind="assignment" x="-425" y="-76">resBit = resBit^1,
resSegIndex = (resBit==0) ? resSegIndex + 1 : resSegIndex,
resCBIndex = (resBit==1) ? resCBIndex + 1 : resCBIndex</label>
			<nail x="-442" y="-102"/>
			<nail x="-612" y="-136"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="assignment" x="-1300" y="-348">copyRouteFromServer(),
copyControlBoxInfo()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<nail x="-816" y="-442"/>
			<nail x="-748" y="-442"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1317" y="-255">resSeg[nextCB][id][curSeg]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-986" y="-229">OK[id]?</label>
			<nail x="-841" y="-204"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id0"/>
			<label kind="guard" x="-646" y="-365">possibleToCrossBox()</label>
			<label kind="synchronisation" x="-646" y="-348">pass[nextCB][id]!</label>
			<nail x="-680" y="-374"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-909" y="-331">hasTrainArrived()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-603" y="-85">notOK[id]?</label>
			<nail x="-654" y="-93"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-425" y="-348">OK[id]?</label>
			<label kind="assignment" x="-425" y="-331">curSeg = nextSeg,
nextSegIndex++,
nextCB = boxes[nextSegIndex],
nextSeg = route[nextSegIndex]</label>
			<nail x="-442" y="-238"/>
			<nail x="-697" y="-187"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-1317" y="-59">possibleToLockSegment()</label>
			<label kind="synchronisation" x="-1326" y="-42">reqLock[boxes[lockIndex]][id]
[route[lockIndex-1]][route[lockIndex]]!</label>
			<nail x="-1122" y="-102"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-714" y="42">possibleToReserveSegment()</label>
			<label kind="synchronisation" x="-714" y="59">resSeg[boxes[resCBIndex]][id][route[resSegIndex]]!</label>
			<nail x="-731" y="-8"/>
			<nail x="-714" y="34"/>
			<nail x="-629" y="34"/>
		</transition>
	</template>
	<template>
		<name>CB</name>
		<parameter>CB_id id</parameter>
		<declaration>tV_id res[3] = {-1, -1, -1};
int[0,2] result;
tV_id tid = -1;
tV_id lockedBy = -1;
SegV_id stem;
SegV_id plus;
SegV_id minus;
SegV_id connected;

const int error = 0;
const int noSwitch = 1;
const int doSwitch = 2;

bool reserve(int tid, int sid){
  for(i : int[0,2]) {
    if (CBs[id][i] == sid &amp;&amp; res[i] == -1) {
      res[i] = tid;
      return true;
    }
  }
  return false;
}

int[0,2] lock(int tid, int s1, int s2){
  if(lockedBy == -1 &amp;&amp; (s1 != s2) &amp;&amp; (s1 == stem || s2 == stem)){
      int s = 0;

      if(s1 == stem || s1 == plus || s1 == minus){
          s++;
      }
      if(s2 == stem || s2 == plus || s2 == minus){
          s++;
      }

      if (s==2 &amp;&amp; connected != s1 &amp;&amp; connected != s2){
        return doSwitch;
      } else if (s==2) {
        return noSwitch;
      }
    }
    return error;
}


void clear(int tid){
     lockedBy = -1;

     for (i : int[0,2]) 
     {
       if(res[i] == tid){
           res[i] = -1;
       }
     }
}

void updateConnected(){
    if(connected == CBs[id][1]){
        connected = CBs[id][2];
    } else {
        connected = CBs[id][1];
    }
}</declaration>
		<location id="id8" x="-994" y="68">
			<name x="-1036" y="42">Initial</name>
			<committed/>
		</location>
		<location id="id9" x="-1139" y="-68">
		</location>
		<location id="id10" x="-356" y="-34">
			<name x="-366" y="-68">Switching</name>
		</location>
		<location id="id11" x="-884" y="-306">
			<name x="-940" y="-338">ReserveAttempted</name>
		</location>
		<location id="id12" x="-170" y="-34">
			<name x="-154" y="-42">Switched</name>
		</location>
		<location id="id13" x="-620" y="-34">
			<name x="-654" y="-17">LockAttempted</name>
		</location>
		<location id="id14" x="-884" y="-68">
			<name x="-858" y="-93">Idle</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id8"/>
			<target ref="id14"/>
			<label kind="assignment" x="-977" y="51">stem = CBs[id][0],
plus = CBs[id][1],
minus = CBs[id][2],
connected = CBs[id][1]</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<label kind="guard" x="-1156" y="-153">tid == lockedBy</label>
			<label kind="synchronisation" x="-1156" y="-136">OK[tid]!</label>
			<label kind="assignment" x="-1156" y="-119">clear(tid),
tid = -1</label>
			<nail x="-1011" y="-144"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-331" y="-34">OKsb[switches[id]]?</label>
			<label kind="assignment" x="-331" y="-17">updateConnected()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-458" y="-153">result == noSwitch</label>
			<nail x="-620" y="-136"/>
			<nail x="-322" y="-136"/>
			<nail x="-170" y="-136"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="select" x="-1130" y="-17">i : int[0,NT-1]</label>
			<label kind="synchronisation" x="-1130" y="0">pass[id][i]?</label>
			<label kind="assignment" x="-1130" y="17">tid = i</label>
			<nail x="-918" y="-51"/>
			<nail x="-1011" y="0"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="guard" x="-569" y="-68">result == doSwitch</label>
			<label kind="synchronisation" x="-569" y="-51">switchh[switches[id]]!</label>
			<nail x="-373" y="-34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-782" y="-34">result==error</label>
			<label kind="synchronisation" x="-782" y="-17">notOK[tid]!</label>
			<label kind="assignment" x="-782" y="0">tid = -1</label>
			<nail x="-816" y="-34"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-807" y="-289">!result</label>
			<label kind="synchronisation" x="-807" y="-272">notOK[tid]!</label>
			<label kind="assignment" x="-807" y="-255">tid = -1</label>
			<nail x="-816" y="-272"/>
			<nail x="-816" y="-136"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-926" y="-238">result</label>
			<label kind="synchronisation" x="-943" y="-221">OK[tid]!</label>
			<label kind="assignment" x="-943" y="-204">tid = -1</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="select" x="-773" y="-221">i : int[0,NT-1],
j : int[0,NSEG-1],
k : int[0,NSEG-1]</label>
			<label kind="guard" x="-773" y="-144">lockedBy == -1</label>
			<label kind="synchronisation" x="-773" y="-127">reqLock[id][i][j][k]?</label>
			<label kind="assignment" x="-773" y="-110">result = lock(i,j,k),
tid = i</label>
			<nail x="-748" y="-68"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="select" x="-1088" y="-263">i : int[0,NT-1],
j : int[0,NSEG-1]</label>
			<label kind="synchronisation" x="-1088" y="-229">resSeg[id][i][j]?</label>
			<label kind="assignment" x="-1088" y="-212">result = reserve(i,j),
tid = i</label>
			<nail x="-952" y="-136"/>
			<nail x="-952" y="-272"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-722" y="34">OK[tid]!</label>
			<label kind="assignment" x="-722" y="51">lockedBy = tid,
tid = -1</label>
			<nail x="-170" y="34"/>
			<nail x="-884" y="34"/>
		</transition>
	</template>
	<template>
		<name>Point</name>
		<parameter>SW_id id</parameter>
		<declaration>bool goToMinus = false;</declaration>
		<location id="id15" x="136" y="144">
			<name x="126" y="110">Initial</name>
			<committed/>
		</location>
		<location id="id16" x="136" y="0">
			<name x="102" y="-42">Switching</name>
		</location>
		<location id="id17" x="340" y="0">
			<name x="330" y="-30">Minus</name>
		</location>
		<location id="id18" x="-68" y="0">
			<name x="-78" y="-30">Plus</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="guard" x="170" y="119">!initialConnections[id]</label>
			<nail x="340" y="144"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id18"/>
			<label kind="guard" x="-42" y="119">initialConnections[id]</label>
			<nail x="-68" y="144"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-8" y="-68">switchh[id]?</label>
			<label kind="assignment" x="-34" y="-51">goToMinus = true</label>
			<nail x="34" y="-34"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="204" y="34">switchh[id]?</label>
			<label kind="assignment" x="204" y="51">goToMinus = false</label>
			<nail x="238" y="34"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="204" y="-68">goToMinus</label>
			<label kind="synchronisation" x="204" y="-51">OKsb[id]!</label>
			<nail x="238" y="-34"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="guard" x="0" y="34">!(goToMinus)</label>
			<label kind="synchronisation" x="0" y="51">OKsb[id]!</label>
			<nail x="34" y="34"/>
		</transition>
	</template>
	<system>system TCC, CB, Point;</system>
	<queries>
		<query>
			<formula>A[] forall(i:CB_id) (not(CB(i).Initial) &amp;&amp; not(CB(i).Switching) &amp;&amp; switches[i] != -1 &amp;&amp; not(Point(switches[i]).Initial)) imply (Point(switches[i]).Plus &amp;&amp; CB(i).connected == CBs[i][1]) || (Point(switches[i]).Minus &amp;&amp; CB(i).connected == CBs[i][2])
			</formula>
			<comment>The local state information about connected segments of a switch box is consistent with the actual state of the switch.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (TCC(i).CrossingPoint imply (CB(TCC(i).nextCB).connected == TCC(i).curSeg &amp;&amp; CB(TCC(i).nextCB).stem == TCC(i).nextSeg) || (CB(TCC(i).nextCB).stem == TCC(i).curSeg &amp;&amp; CB(TCC(i).nextCB).connected == TCC(i).nextSeg))
			</formula>
			<comment>A train can only cross a point if the point's position is consistent with the segment that the trains is entering.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (TCC(i).CrossingPoint imply switches[TCC(i).nextCB] == -1 || Point(switches[TCC(i).nextCB]).Plus || Point(switches[TCC(i).nextCB]).Minus)
			</formula>
			<comment>No derailment.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (not(TCC(i).Initial) imply (CBs[TCC(i).nextCB][0] == TCC(i).curSeg imply (CBs[TCC(i).nextCB][1] == TCC(i).nextSeg || CBs[TCC(i).nextCB][2] == TCC(i).nextSeg)) &amp;&amp; (CBs[TCC(i).nextCB][0] == TCC(i).nextSeg imply (CBs[TCC(i).nextCB][1] == TCC(i).curSeg || CBs[TCC(i).nextCB][2] == TCC(i).curSeg)))
			</formula>
			<comment>A train's current segment is either the same as its next segment or connected to it.
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) TCC(i).Arrived
			</formula>
			<comment>All trains will eventually arrive at their destinations.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:t_id) i != j and not(TCC(i).Initial) and not(TCC(j).Initial) imply TCC(i).curSeg != TCC(j).curSeg
			</formula>
			<comment>Two trains are never on the same segment after the initialization step.
			</comment>
		</query>
		<query>
			<formula>A[] forall(id:t_id) forall(i:Seg_id) TCC(id).Initial or (TCC(id).boxes[i] == controlBoxes[id][i] and not(TCC(id).Initial))
			</formula>
			<comment>A trains internal notion of the control boxes will always be the same as its global counterpart after it has left the initial state
			</comment>
		</query>
		<query>
			<formula>A[] forall(id:t_id) forall(i:Seg_id) TCC(id).Initial or (TCC(id).route[i] == routes[id][i] and not(TCC(id).Initial))
			</formula>
			<comment>A trains internal notion of its route will always be the same as its global counterpart after it has left the initial state
			</comment>
		</query>
	</queries>
</nta>
