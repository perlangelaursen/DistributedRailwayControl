
//NO COLLISION
--Fewer than two trains in network

//NO DERAILMENT
//If a train is in a critical section, the point in that section is not in the middle of switching
AG(([passing(t0, cb3)] ~inSwitching(p0)))
//If a train is in a critical section, then the segments that it is moving on are connected
AG((doublePos(t0,1,0) -> connects(cb3,1,0)))

//OPERATION REQUIREMENTS: RESERVE
//A reservation is only requested if the requested segment is a part of the requesting train's route
~EF{reqSegS(t0,2)}
//A reservation is only requested if the control box that a train contacts is a part of the train's route
~EF{reqSegAt(t0,cb0) | reqSegAt(t0,cb2)}
//A reservation is only successful if the requested segment is associated with the control box that receives the request and if it is not already reserved
AG((resOK(cb0,1) -> segFree(cb0,1)) & (resOK(cb1,0) -> segFree(cb1,0)) & (resOK(cb2,2) -> segFree(cb2,2)) & (resOK(cb3,0) -> segFree(cb3,0)) & (resOK(cb3,1) -> segFree(cb3,1)) & (resOK(cb3,2) -> segFree(cb3,2)))

//OPERATION REQUIREMENTS: LOCK
//A train never has more locks than the lock limit
~EF(lockLimitExceeded(t0))
//A lock is only requested if the involved switch box is in the route of the requesting train
~EF{reqLockingAt(t0,cb0) | reqLockingAt(t0,cb2)}
//A lock is only requested if the requesting train has the reservation for the two segments at the switch box
AG(([reqLocking(t0,cb3,1,0)] (reserved(t0,1,cb3) & reserved(t0,0,cb3))))
//A lock is only successful if the point involved in the request was unlocked prior to the request
AG((inSwitched(cb0) -> lockedBy(cb0,null)) & (inSwitched(cb1) -> lockedBy(cb1,null)) & (inSwitched(cb2) -> lockedBy(cb2,null)) & (inSwitched(cb3) -> lockedBy(cb3,null)))
//A switch is only requested if the requested connection is of segments that are adjacent in the train's route
~EF{reqLockingS(t0,1,1) | reqLockingS(t0,1,2) | reqLockingS(t0,2,0) | reqLockingS(t0,2,1) | reqLockingS(t0,2,2)}
//A switch is only successful if the requested conenction is of the stem segment and plus or minus segment of the switch box
AG(([reqLocking(t0,cb3,1,0)] canConnect(cb3,1,0)))
//A control box only switches and locks its point if no train is in its critical section
AG(([switching(cb0)] (~inCrit(cb0,t0))) & ([switching(cb1)] (~inCrit(cb1,t0))) & ([switching(cb2)] (~inCrit(cb2,t0))) & ([switching(cb3)] (~inCrit(cb3,t0))))

//OPERATION REQUIREMENTS: PASS
//A train only passes a switch box if it has been locked for the train
AG(((doublePos(t0,1,0) & isSwitchBox(cb3)) -> locked(t0,cb3)))
//A train never passes the last control box in its route
~EF{passing(t0,cb1)}
//A train only enters a segment that it has the full reservation of
AG((doublePos(t0,1,0) -> (reserved(t0,0,cb3) & reserved(t0,0,cb1))))

//CONSISTENCY
//Reservation consistency: The reservations saved in the state space of a Train are also saved in the state spaces of the involved CBs
AG((reserved(t0,1,cb3) -> reservedBy(cb3,1,t0)) & (reserved(t0,1,cb1) -> reservedBy(cb1,1,t0)))
//Lock consistency: The locks saved in the state space of a Train are also saved in the state spaces of the involved CBs
AG((locked(t0,cb0) -> lockedBy(cb0,t0)) & (locked(t0,cb3) -> lockedBy(cb3,t0)) & (locked(t0,cb1) -> lockedBy(cb1,t0)))
//Point consistency: A CB's connected information is consistent with its Point's position
AG(((connects(cb3,0,1) & ~inSwitching(cb3)) -> inPlus(p0)) & ((connects(cb3,0,2) & ~inSwitching(cb3)) -> ~inPlus(p0)))
//Position consistency: The train position saved in a TCC is consistent with the train's actual position
AG((doublePos(t0,1,0) -> connects(cb0,1,0)))

//LIVENESS
EF All_Trains_Arrive

//AUXILIARY
//A train never moves from one segment to another segment if it is not planned in its route
~EF(doublePos(t0,1,1) | doublePos(t0,1,2) | doublePos(t0,2,0) | doublePos(t0,2,1) | doublePos(t0,2,2))
//A train never passes a control box that is not in its route
~EF{passing(t0,cb0) | passing(t0,cb2)}

