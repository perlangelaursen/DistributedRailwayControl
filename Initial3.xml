<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Station 2
const int NCB = 6; 
const int NSEG = 7; 
const int NTRAIN = 2; 
const int NPOINT = 4;

//TYPES
typedef int[0, NTRAIN-1] t_id;
typedef int[0, NCB-1]  cB_id;
typedef int[0, NPOINT-1] p_id;
typedef int[0, NSEG-1] seg_id;
typedef int[-1, NSEG-1] segV_id;
typedef int[-1, NPOINT-1] pV_id;
typedef int[-1, NCB-1] cBV_id;
typedef int[-1, NTRAIN-1] tV_id;
typedef struct {
    cB_id cb;
    seg_id seg;
} reservation;

const int[1,NCB] lockLimit = 2;
const int[1,NSEG] resLimit = 2;

const cBV_id boxRoutes[NTRAIN][NCB] = {{0,1,2,3,4,5}, {5,4,3,2,1,-1}};
const segV_id segRoutes[NTRAIN][NSEG]= {{0,1,3,4,6,-1,-1}, {6,5,3,2,-1,-1,-1}};
const segV_id cBs[NCB][3]= {{0,-1,-1}, {0,1,2}, {3,1,2}, {3,4,5}, {6,4,5}, {6,-1,-1}};
const pV_id points[NCB] = { -1, 0, 1, 2, 3,-1};
const reservation initialRes[NTRAIN] = {{1, 0}, {4, 6}};
const bool pointInPlus[NPOINT] = {true, true, true, true};

//Channels
chan reqSeg[NCB][NTRAIN][NSEG];
chan reqLock[NCB][NTRAIN][NSEG][NSEG];
chan OK[NTRAIN];
chan notOK[NTRAIN];
chan pass[NCB];
chan passed[NCB];
chan switchPoint[NPOINT];
chan OKp[NCB];
urgent broadcast chan start;

////////////////////////////////////
//Well-formedness Functions
bool initialResIsConsistent(t_id id){
    return initialRes[id].cb == boxRoutes[id][1] &amp;&amp; initialRes[id].seg == segRoutes[id][0];
}

bool reservationIsWellFormed(reservation res){
    return cBs[res.cb][0] == res.seg || cBs[res.cb][1] == res.seg || cBs[res.cb][2] == res.seg;
}


bool sharesSegmentS(cB_id i, cB_id j, seg_id s){
    return  (i != j) &amp;&amp;
            (cBs[i][0] == s || cBs[i][1] == s || cBs[i][2] == s) &amp;&amp; 
            (cBs[j][0] == s || cBs[j][1] == s || cBs[j][2] == s);
}

bool routesAreConsistent(t_id id){
    cBV_id bRoute[NCB] = boxRoutes[id];
    segV_id sRoute[NSEG] = segRoutes[id];

    for(i:int[0,NCB-2]){
        if((bRoute[i+1] != -1) == (sRoute[i] == -1)){
            return false;
        }
        if(bRoute[i+1] != -1 &amp;&amp; !sharesSegmentS(bRoute[i], bRoute[i+1], sRoute[i])){
            return false;
        }
    }
    return true; 
}

bool sharesSegment(cB_id i, cB_id j){
    return (i != j) &amp;&amp;
            ((cBs[i][0] != -1 &amp;&amp; (cBs[i][0] == cBs[j][0] || cBs[i][0] == cBs[j][1] || cBs[i][0] == cBs[j][2])) ||
            (cBs[i][1] != -1 &amp;&amp; (cBs[i][1] == cBs[j][0] || cBs[i][1] == cBs[j][1] || cBs[i][1] == cBs[j][2])) ||
            (cBs[i][2] != -1 &amp;&amp; (cBs[i][2] == cBs[j][0] || cBs[i][2] == cBs[j][1] || cBs[i][2] == cBs[j][2])));
}

bool boxRouteIsWellFormed(cBV_id route[NCB]){
    for(i:int[0,NCB-2]){
        if(route[i] == -1 &amp;&amp; route[i+1] != -1){
            return false;
        }
        if(route[i+1] != -1 &amp;&amp; !sharesSegment(route[i], route[i+1])){
            return false;
        }

    }
    return true; 
}
bool canConnect(seg_id s1, seg_id s2){
    for(i:cB_id){
        if(cBs[i][0] == s1 &amp;&amp; (cBs[i][1] == s2 || cBs[i][2] == s2)){
            return true;
        }
        if (cBs[i][0] == s2 &amp;&amp; (cBs[i][1] == s1 || cBs[i][2] == s1)){
            return true;
        }
    }
    return false;   
}

bool segRouteIsWellFormed(segV_id route[NSEG]){
    int i = 0;
    if(route[0] == -1){
        return false;
    }
    while(i &lt;= NSEG - 2){
        if(route[i] == -1 &amp;&amp; route[i+1] != -1){
            return false;
        }
        if(route[i+1] != -1 &amp;&amp; !canConnect(route[i], route[i+1])){
            return false;
        }
        i++;
    }
    return true; 
}

int pointIsWellFormed(cBV_id id){
    if(points[id] != -1){
        for(i : cB_id){
            if(i != id &amp;&amp; points[i] == points[id]){
                return false;
            }
        }
    }
    return (points[id] == -1) == (cBs[id][2] == -1);
}

int otherBoxes(cB_id id, segV_id s){
    segV_id cB[3] = cBs[id];
    int found = 0;
    for(i:cB_id){
        if(id != i &amp;&amp; (cBs[i][0] == s || cBs[i][1] == s || cBs[i][2] == s)){
            found++;
        }
    }
    return found;
}

bool cBIsWellFormed(cB_id id){
    segV_id cB[3] = cBs[id];

    //Invalid definitions
    if(cB[0] == -1 || (cB[1] == -1 &amp;&amp; cB[2] != -1) || (cB[0] == -1 &amp;&amp; cB[1] == -1)){
        return false;
    }
    if((cB[0] != -1 &amp;&amp; (cB[0] == cB[1] || cB[0] == cB[2])) ||
        (cB[1] != -1 &amp;&amp; (cB[1] == cB[0] || cB[1] == cB[2])) ||
        (cB[2] != -1 &amp;&amp; (cB[2] == cB[0] || cB[2] == cB[1]))){
        return false;
    }

    //Case: []--x--
    if(cB[1] == -1){
        return otherBoxes(id, cB[0]) == 1;
    }

    //Case: --x--[]--y--
    if(cB[2] == -1){
        return otherBoxes(id, cB[0]) == 1 &amp;&amp; otherBoxes(id, cB[1]) == 1;
    }

    //Case: Switch box
    for(i:cB_id){
        if(i != id &amp;&amp; 
            (cBs[i][0] == cB[0] &amp;&amp; (cBs[i][1] == cB[1] || cBs[i][2] == cB[2])) ||
            (cBs[i][1] == cB[1] &amp;&amp; cBs[i][2] != cB[2]) ||
            (cBs[i][2] == cB[2] &amp;&amp; cBs[i][1] != cB[1])){
                return false;
        }
    }
    return otherBoxes(id, cB[0]) == 1 &amp;&amp; otherBoxes(id, cB[1]) == 1 &amp;&amp; otherBoxes(id, cB[2]) == 1;
}
</declaration>
	<template>
		<name x="5" y="5">TCC</name>
		<parameter>t_id id</parameter>
		<declaration>segV_id segments[NSEG];
int[0,NSEG] routeLength;
segV_id curSeg;

cBV_id boxes[NCB];
bool requiresLock[NCB];
int[0,NCB] boxesLength;
cBV_id nextCB;

int[0,1] resBit = 0;
cB_id resCBIndex = 1;
seg_id resSegIndex = 0;

cB_id lockIndex = 1;
seg_id nextSegIndex = 0;

//cB_id origLockIndex = 0;
//seg_id prevResIndex = 0;

cBV_id reservations[NSEG][2];
bool locks[NCB];

void copySegments() {
    for(i : seg_id) {
        segments[i] = segRoutes[id][i];
        if(segments[i]&gt;-1) {
            routeLength++;
        }
    }
    curSeg = segments[0];

    if(routeLength &gt; 1){
        resSegIndex = 1;
    }
    if(NSEG &gt; 1){
        nextSegIndex = 1;
    }
}

void copyControlBoxes() {
    for(i : cB_id) {
        boxes[i] = boxRoutes[id][i];
        if(boxes[i] &gt; -1){
            boxesLength++;
            requiresLock[i] = points[boxes[i]] &gt; -1;
        }
    }
    nextCB = boxes[1];

    for(i : seg_id){
        reservations[i][0] = -1;
        reservations[i][1] = -1;
    }
    reservations[0][1] = boxes[1];
}

void updateLockIndex(){
    while(lockIndex &lt; NCB-1 &amp;&amp; !requiresLock[lockIndex]){
        lockIndex++;
    }
}
bool possibleToLock() {
    return lockIndex &lt; routeLength &amp;&amp; lockIndex - nextSegIndex &lt; lockLimit &amp;&amp; resSegIndex &gt; lockIndex;
}

bool hasArrived() {
    return curSeg == segments[routeLength-1];
}

bool possibleToReserve() {
    return resSegIndex &lt; routeLength &amp;&amp; resCBIndex &lt;= routeLength &amp;&amp; resSegIndex - nextSegIndex &lt; resLimit &amp;&amp; !hasArrived();
}

bool possibleToPass() {
    return resSegIndex &gt; nextSegIndex &amp;&amp; lockIndex &gt; nextSegIndex &amp;&amp; nextCB != boxes[routeLength];
}

void updateResData(){
    reservations[resSegIndex][resBit] = boxes[resCBIndex];
    resBit = resBit^1;
   // prevResIndex = (resBit==0) ? resSegIndex : prevResIndex;
    resSegIndex = (resBit==0) ? resSegIndex + 1 : resSegIndex;
    resCBIndex = (resBit==1) ? resCBIndex + 1 : resCBIndex;
}

void updateLocationInfo(){
    reservations[nextSegIndex-1][1] = -1;
    reservations[nextSegIndex][0] = -1;
    locks[nextSegIndex] = false;

    curSeg = segments[nextSegIndex];
    nextSegIndex++;
    nextCB = boxes[nextSegIndex];
}

void updateLockInfo(){
    //origLockIndex = lockIndex;
    locks[lockIndex] = true;
    lockIndex++;
    updateLockIndex();
}

bool isWellFormed(){
	return segRouteIsWellFormed(segRoutes[id]) &amp;&amp;
           boxRouteIsWellFormed(boxRoutes[id]) &amp;&amp; 
           routesAreConsistent(id) &amp;&amp; 
           reservationIsWellFormed(initialRes[id]) &amp;&amp; 
           initialResIsConsistent(id);
}</declaration>
		<location id="id0" x="-340" y="-1156">
			<name x="-323" y="-1173">DoubleSegment</name>
		</location>
		<location id="id1" x="-1020" y="-1156">
			<name x="-1030" y="-1190">Initial</name>
		</location>
		<location id="id2" x="-680" y="-1156">
			<name x="-748" y="-1181">Arrived</name>
		</location>
		<location id="id3" x="-340" y="-748">
			<name x="-323" y="-765">Reserving</name>
		</location>
		<location id="id4" x="-680" y="-952">
			<name x="-807" y="-969">SingleSegment</name>
		</location>
		<location id="id5" x="-1020" y="-748">
			<name x="-1044" y="-732">Locking</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-1011" y="-1096">isWellFormed()</label>
			<label kind="synchronisation" x="-1011" y="-1079">start?</label>
			<label kind="assignment" x="-1011" y="-1062">copySegments(),
copyControlBoxes(),
updateLockIndex()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-833" y="-739">notOK[id]?</label>
			<nail x="-748" y="-748"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-841" y="-858">OK[id]?</label>
			<label kind="assignment" x="-841" y="-841">updateLockInfo()</label>
			<nail x="-850" y="-850"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-323" y="-875">OK[id]?</label>
			<label kind="assignment" x="-323" y="-858">updateResData()</label>
			<nail x="-340" y="-884"/>
			<nail x="-510" y="-918"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<nail x="-714" y="-1224"/>
			<nail x="-646" y="-1224"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-544" y="-1207">possibleToPass()</label>
			<label kind="synchronisation" x="-544" y="-1190">pass[nextCB]!</label>
			<nail x="-578" y="-1156"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-765" y="-1113">hasArrived()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-501" y="-867">notOK[id]?</label>
			<nail x="-552" y="-875"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-450" y="-994">passed[nextCB]!</label>
			<label kind="assignment" x="-450" y="-977">updateLocationInfo()</label>
			<nail x="-340" y="-1020"/>
			<nail x="-595" y="-969"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-1317" y="-833">possibleToLock()</label>
			<label kind="synchronisation" x="-1317" y="-816">reqLock[boxes[lockIndex]][id]
[segments[lockIndex-1]][segments[lockIndex]]!</label>
			<nail x="-1020" y="-884"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-612" y="-740">possibleToReserve()</label>
			<label kind="synchronisation" x="-612" y="-722">reqSeg[boxes[resCBIndex]][id][segments[resSegIndex]]!</label>
			<nail x="-629" y="-790"/>
			<nail x="-612" y="-748"/>
			<nail x="-527" y="-748"/>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<location id="id6" x="0" y="136">
			<name x="8" y="110">Initialized</name>
		</location>
		<location id="id7" x="0" y="0">
			<name x="-10" y="-34">Uninitialized</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="8" y="51">start!</label>
		</transition>
	</template>
	<template>
		<name>CB</name>
		<parameter>cB_id id</parameter>
		<declaration>segV_id segments[3];
segV_id connected =-1;
pV_id point = -1;

tV_id res[3] = {-1, -1, -1};
int[-1,2] result;
tV_id tid = -1;
tV_id lockedBy = -1;

const int ERROR = 0;
const int NOSWITCH = 1;
const int DOSWITCH = 2;

void setInfo() {
    segments[0] = cBs[id][0];
    segments[1] = cBs[id][1];
    segments[2] = cBs[id][2];
    point = points[id];
    connected = segments[1];

    if(point != -1 &amp;&amp; !pointInPlus[point]){
        connected = segments[2];
    }

    for(i : t_id) {
        if (initialRes[i].cb == id) {
            seg_id s = initialRes[i].seg;
            if(s == segments[0]){
                res[0] = i;
            } else if (s == segments[1]){
                res[1] = i;
            } else {
                res[2] = i;
            }
        }
    }
}

int[-1,2] checkSegment(t_id tid, seg_id sid) {    
    for(i:int[0,2]) {
        if(segments[i] == sid &amp;&amp; res[i] == -1) {
            return i;
        }
    }
    return -1;
}

int[0,2] lock(t_id tid, seg_id s1, seg_id s2){
  if(lockedBy == -1 &amp;&amp; (s1 != s2) &amp;&amp; (s1 == segments[0] || s2 == segments[0]) &amp;&amp; (s1 == segments[0] || s1 == segments[1] || s1 == segments[2]) &amp;&amp; (s2 == segments[0] || s2 == segments[1] || s2 == segments[2])){
      if((s1 == segments[0] &amp;&amp; s2 != connected) || (s2 == segments[0] &amp;&amp; s1 != connected)){
        return DOSWITCH;
      } else if ((s1 == segments[0] &amp;&amp; s2 == connected) || (s2 == segments[0] &amp;&amp; s1 == connected)){
        return NOSWITCH;
      }
   }
   return ERROR;
}


void clear(){
     lockedBy = -1;

     res[0] = -1;
     if(connected == segments[1]) {
        res[1] = -1;
     } else {
        res[2] = -1;
     }
}

void updateConnected(){
    if(connected == segments[1]){
        connected = segments[2];
    } else {
        connected = segments[1];
    }
}

bool isWellFormed(){
    return cBIsWellFormed(id) &amp;&amp; pointIsWellFormed(id);
}

int countTCCReservations(t_id id) {
    int result = 0;
    for(i : int[0,2]) {
        if (res[i] == id) {
            result++;
        }
    }
    return result;
}</declaration>
		<location id="id8" x="-1045" y="51">
			<name x="-1096" y="42">Initial</name>
		</location>
		<location id="id9" x="-1139" y="-68">
			<name x="-1164" y="-102">Passing</name>
		</location>
		<location id="id10" x="-356" y="-34">
			<name x="-366" y="-68">Switching</name>
		</location>
		<location id="id11" x="-884" y="-306">
			<name x="-940" y="-338">SegmentChecked</name>
		</location>
		<location id="id12" x="-170" y="-34">
			<name x="-154" y="-42">Switched</name>
		</location>
		<location id="id13" x="-646" y="-34">
			<name x="-680" y="-17">LockChecked</name>
		</location>
		<location id="id14" x="-884" y="-68">
			<name x="-858" y="-93">Idle</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id8"/>
			<target ref="id14"/>
			<label kind="guard" x="-1011" y="25">isWellFormed()</label>
			<label kind="synchronisation" x="-1011" y="42">start?</label>
			<label kind="assignment" x="-1011" y="59">setInfo()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-1079" y="-136">passed[id]?</label>
			<label kind="assignment" x="-1079" y="-119">clear()</label>
			<nail x="-1020" y="-102"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-331" y="-34">OKp[point]?</label>
			<label kind="assignment" x="-331" y="-17">updateConnected()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-458" y="-153">result == NOSWITCH</label>
			<nail x="-646" y="-136"/>
			<nail x="-322" y="-136"/>
			<nail x="-170" y="-136"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-1105" y="-34">pass[id]?</label>
			<nail x="-952" y="-51"/>
			<nail x="-1020" y="-34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="guard" x="-569" y="-68">result == DOSWITCH</label>
			<label kind="synchronisation" x="-569" y="-51">switchPoint[point]!</label>
			<nail x="-373" y="-34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-782" y="-34">result == ERROR</label>
			<label kind="synchronisation" x="-782" y="-17">notOK[tid]!</label>
			<label kind="assignment" x="-782" y="0">tid = -1,
result=0</label>
			<nail x="-816" y="-34"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-807" y="-289">result == -1</label>
			<label kind="synchronisation" x="-807" y="-272">notOK[tid]!</label>
			<label kind="assignment" x="-807" y="-255">tid = -1,
result=0</label>
			<nail x="-816" y="-272"/>
			<nail x="-816" y="-136"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-943" y="-238">result &gt;= 0</label>
			<label kind="synchronisation" x="-943" y="-221">OK[tid]!</label>
			<label kind="assignment" x="-943" y="-204">res[result]=tid,
tid = -1,
result=0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="select" x="-790" y="-187">i : t_id,
j : seg_id,
k : seg_id</label>
			<label kind="guard" x="-790" y="-136">lockedBy == -1</label>
			<label kind="synchronisation" x="-790" y="-119">reqLock[id][i][j][k]?</label>
			<label kind="assignment" x="-790" y="-102">result = lock(i,j,k),
tid = i</label>
			<nail x="-714" y="-68"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="select" x="-1173" y="-263">i : t_id,
j : seg_id</label>
			<label kind="synchronisation" x="-1173" y="-229">reqSeg[id][i][j]?</label>
			<label kind="assignment" x="-1173" y="-212">result = checkSegment(i,j),
tid = i</label>
			<nail x="-952" y="-136"/>
			<nail x="-952" y="-272"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-722" y="34">OK[tid]!</label>
			<label kind="assignment" x="-722" y="51">lockedBy = tid,
tid = -1,
result=0</label>
			<nail x="-170" y="34"/>
			<nail x="-884" y="34"/>
		</transition>
	</template>
	<template>
		<name>Point</name>
		<parameter>p_id id</parameter>
		<location id="id15" x="136" y="-85">
			<name x="102" y="-119">SwitchingPM</name>
		</location>
		<location id="id16" x="136" y="153">
			<name x="127" y="170">Initial</name>
		</location>
		<location id="id17" x="136" y="68">
			<name x="102" y="34">SwitchingMP</name>
		</location>
		<location id="id18" x="340" y="0">
			<name x="330" y="-30">Minus</name>
		</location>
		<location id="id19" x="-68" y="0">
			<name x="-78" y="-30">Plus</name>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="guard" x="238" y="119">!pointInPlus[id]</label>
			<label kind="synchronisation" x="289" y="136">start?</label>
			<nail x="340" y="153"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="guard" x="-51" y="119">pointInPlus[id]</label>
			<label kind="synchronisation" x="-50" y="136">start?</label>
			<nail x="-68" y="153"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-42" y="-68">switchPoint[id]?</label>
			<nail x="34" y="-42"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="212" y="42">switchPoint[id]?</label>
			<nail x="238" y="34"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="221" y="-68">OKp[id]!</label>
			<nail x="238" y="-42"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="0" y="42">OKp[id]!</label>
			<nail x="34" y="34"/>
		</transition>
	</template>
	<system>system Initializer, TCC, CB, Point;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; forall(i:t_id) TCC(i).Arrived
			</formula>
			<comment>Liveness
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:t_id) Initializer.Initialized &amp;&amp; i != j imply
	(TCC(i).curSeg != TCC(j).curSeg) &amp;&amp;
	(TCC(i).DoubleSegment &amp;&amp; TCC(j).DoubleSegment imply TCC(i).curSeg != TCC(j).segments[TCC(j).nextSegIndex]) &amp;&amp;
	(TCC(i).DoubleSegment &amp;&amp; TCC(j).DoubleSegment imply TCC(i).segments[TCC(i).nextSegIndex] != TCC(j).segments[TCC(j).nextSegIndex]) &amp;&amp;
	(TCC(i).DoubleSegment &amp;&amp; !TCC(j).DoubleSegment imply TCC(i).segments[TCC(i).nextSegIndex] != TCC(j).curSeg)
			</formula>
			<comment>No collision
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:int[0,1]) TCC(i).DoubleSegment imply
	(TCC(i).segments[TCC(i).nextSegIndex-j] == CB(TCC(i).nextCB).segments[0]) ||
	(TCC(i).segments[TCC(i).nextSegIndex-j] == CB(TCC(i).nextCB).connected)
			</formula>
			<comment>No derailment:
A train passing a point always moves between the connected segments
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) TCC(i).DoubleSegment &amp;&amp; points[TCC(i).nextCB] != -1 imply
	!Point(points[TCC(i).nextCB]).SwitchingPM &amp;&amp; !Point(points[TCC(i).nextCB]).SwitchingMP
			</formula>
			<comment>No derailment:
A train is never in a critical section while the point there is switching
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) CB(i).lockedBy &gt; -1 imply
	(exists(k:cB_id) TCC(CB(i).lockedBy).boxes[k] == i &amp;&amp; TCC(CB(i).lockedBy).locks[k])
			</formula>
			<comment>Lock concistency:
A CB's lock information is also reflected in the state space of the relevant TCC
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Initializer.Initialized imply
	 forall(j:cB_id) TCC(i).locks[j] == true imply
	(CB(TCC(i).boxes[j]).lockedBy == i)
			</formula>
			<comment>Lock concistency:
A TCC's obtained locks are reflected in the relevant CBs
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Initializer.Initialized imply
	 (forall(j:seg_id) forall(k:int[0,1]) TCC(i).reservations[j][k] &gt; -1 imply 
	(exists(l:int[0,2]) CB(TCC(i).reservations[j][k]).segments[l] == TCC(i).segments[j] &amp;&amp; CB(TCC(i).reservations[j][k]).res[l] == i))
			</formula>
			<comment>Reservation concistency:
All reservations at a TCC are also saved in the state space of the relevant CBs
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) forall(j:int[0,2]) CB(i).res[j] &gt; -1 imply
	(exists(k:seg_id) exists(l:int[0,1]) TCC(CB(i).res[j]).segments[k] == CB(i).segments[j] &amp;&amp; TCC(CB(i).res[j]).reservations[k][l] == i)
			</formula>
			<comment>Reservation concistency: 
All reservations at a CB are also saved in the state space of the relevant TCCs
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) TCC(i).DoubleSegment imply forall(j:int[0,1]) TCC(i).reservations[TCC(i).nextSegIndex][i] &gt; -1
			</formula>
			<comment>A train only enters a segment that is has the full reservation of
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) TCC(i).DoubleSegment imply TCC(i).nextCB != TCC(i).boxes[TCC(i).routeLength]
			</formula>
			<comment>A train never passes the last control box in its route
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) TCC(i).DoubleSegment &amp;&amp; points[TCC(i).nextCB] != -1 imply
	CB(TCC(i).nextCB).lockedBy == i
			</formula>
			<comment>A train only passes a switch box if it has been locked for the train
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) CB(i).Switched imply CB(i).lockedBy == -1
			</formula>
			<comment>A CB only returns acknowledgement for a lock request if its point was unlocked prior to the request
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) CB(i).Switched imply !(exists(j:t_id) TCC(j).DoubleSegment &amp;&amp; TCC(j).nextCB == i)
			</formula>
			<comment>A control box only switches if no train is in its critical section
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id) (TCC(i).Locking &amp;&amp; CB(j).Switched &amp;&amp; CB(j).tid == i) imply 
	(exists(k:int[1,2]) 
	(CB(j).segments[0] == TCC(i).segments[TCC(i).lockIndex-1] &amp;&amp; CB(j).segments[k] == TCC(i).segments[TCC(i).lockIndex]) ||
	(CB(j).segments[0] == TCC(i).segments[TCC(i).lockIndex] &amp;&amp; CB(j).segments[k] == TCC(i).segments[TCC(i).lockIndex-1]))
			</formula>
			<comment>A CB only returns acknowledgement for a switch/lock request if the requested segments are its stem and one of its other segments
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id) (TCC(i).Locking &amp;&amp; CB(j).Switched &amp;&amp; CB(j).tid == i) imply 
	(exists (k:int[0,NSEG-2]) 
	(CB(j).segments[0] == TCC(i).segments[k] &amp;&amp; CB(j).connected == TCC(i).segments[k+1]) ||
	(CB(j).segments[0] == TCC(i).segments[k+1] &amp;&amp; CB(j).connected == TCC(i).segments[k]))
			</formula>
			<comment>A TCC only requests the switching (locking) for segments adjacent in its route

			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) CB(i).lockedBy != -1 imply 
	CB(i).lockedBy == CB(i).res[0] &amp;&amp; 
	exists(j:int[1,2]) CB(i).res[j] == CB(i).lockedBy
			</formula>
			<comment>A TCC only has locks for CB's that it has the stem reservation at and one other segment reservation
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id)  (TCC(i).Locking &amp;&amp; CB(j).LockChecked &amp;&amp; CB(j).tid == i) imply
	(exists(k:cB_id) TCC(i).boxes[k] == j)
			</formula>
			<comment>A TCC only requests locks at switch boxes on its route
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) TCC(i).Locking imply TCC(i).locks[TCC(i).lockIndex] == false
			</formula>
			<comment>A TCC only requests locks for switch boxes that it has not already obtained the lock at
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:cB_id) CB(i).SegmentChecked &amp;&amp; CB(i).result &gt;= 0 imply
	CB(i).res[CB(i).result] == -1
			</formula>
			<comment>A CB only returns acknowledgement for reservation requests of available segments
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id) 
	(TCC(i).Reserving &amp;&amp; CB(j).SegmentChecked &amp;&amp; CB(j).tid == i &amp;&amp; CB(j).result &gt; -1) imply 
	(exists(k:int[0,2]) CB(j).segments[k] == TCC(i).segments[TCC(i).resSegIndex])
			</formula>
			<comment>A control box only returns acknowledgement for reservations involving segments that it is associated with
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id) 
	(TCC(i).Reserving &amp;&amp; CB(j).SegmentChecked &amp;&amp; CB(j).tid == i) imply 
	(exists(k:cB_id) TCC(i).boxes[k] == j)
			</formula>
			<comment>A TCC only reserves at control boxes on its route
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:cB_id) 
	(TCC(i).Reserving &amp;&amp; CB(j).SegmentChecked &amp;&amp; CB(j).tid == i &amp;&amp; CB(j).result &gt; -1) imply 
	(exists(k:seg_id) CB(j).segments[CB(j).result] == TCC(i).segments[k])
			</formula>
			<comment>A TCC only reserves segments on its route
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) TCC(i).Reserving imply TCC(i).reservations[TCC(i).resSegIndex][TCC(i).resBit] == -1
			</formula>
			<comment>A[] forall(i:t_id) TCC(i).Reserving imply TCC(i).reservations[TCC(i).resSegIndex][TCC(i).resBit] == -1
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Initializer.Initialized imply 
	((sum(j:seg_id) TCC(i).reservations[j][0] &gt; -1) + (sum(j:seg_id) TCC(i).reservations[j][1] &gt; -1) &lt;= resLimit*2+1)
			</formula>
			<comment>A TCC never has more reservations than allowed
			</comment>
		</query>
	</queries>
</nta>
