// Station 4
const int NCB = 10; //Number of control boxes
const int NSEG = 13; //Number of segments
const int NTRAIN = 2; //Number of trains
const int NPOINT = 8; //Number of switchable points

//TYPES
typedef int[0, NTRAIN-1] t_id; //Train IDs
typedef int[0, NCB-1]  cB_id; //Control box IDs
typedef int[0, NPOINT-1] p_id; //Switch IDs
typedef int[0, NSEG-1] seg_id; //Segment IDs
typedef int[-1, NSEG-1] segV_id; //Segment IDs with -1
typedef int[-1, NPOINT-1] pV_id; //Switch IDs with -1
typedef int[-1, NCB-1] cBV_id; //Control Box IDs with -1
typedef int[-1, NTRAIN-1] tV_id; //Train IDs with -1
typedef struct {
    cB_id cb;
    seg_id seg;
} reservation;

//EXAMPLE
const int[1,NCB] lockLimit = 2; //Max number of reservation (pairs)
const int[1,NSEG] resLimit = 2; //Max number of locks

const cBV_id boxRoutes[NTRAIN][NCB] = {{0,1,2,3,4,5,6,7,8,9}, {9,8,7,6,5,4,3,2,1,-1}};
const segV_id segRoutes[NTRAIN][NSEG]= {{0,1,3,4,6,7,9,10,12,-1,-1,-1,-1}, {12,11,9,8,6,5,3,2,-1,-1,-1,-1,-1}};
const segV_id cBs[NCB][3]= {{0,-1,-1}, {0,1,2}, {3,1,2}, {3,4,5}, {6,4,5}, {6,7,8}, {9,7,8}, {9,10,11}, {12,10,11}, {12,-1,-1}}; //(stem, plus, minus)
const pV_id points[NCB] = { -1, 0, 1, 2, 3,4,5,6,7,-1};
const reservation initialRes[NTRAIN] = {{1, 0}, {8, 12}};
const bool pointInPlus[NPOINT] = {true, true, true, true, true, true, true, true};
